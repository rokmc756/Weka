# weka binary check
#
# ./wekachecker 192.168.0.{181..190}

#
- name: Install expect
  shell: |
    dnf -y install yum-utils
    yum-config-manager --enable devel
    yum install -y expect
    yum-config-manager --disable devel
  register: install_expect
- debug: msg={{ install_expect }}

# 2024-02-22 22:48:15 | DEBUG   | stderr </weka/wekanode:25:14>: modinfo: ERROR: could no
- name: Load vfio_pci Kernel module
  shell: |
    modprobe vfio_pci
  register: load_vfio_pci
- debug: msg={{ load_vfio_pci }}

#
- name: Deploy Weka binary
  shell: |
    cd {{ weka.base_path }}/{{ weka_file_name }} ; ./install.sh
  register: install_weka_binary
- debug: msg={{ install_weka_binary }}

####################################################################
# weka local ps
# weka local stop
# weka local rm default -f
# weka local setup host --name default --memory 5GiB
# pdsh -w weka4-node[01-05] weka local ps

#
- name: Stop and Remove local weka container
  shell: |
    weka local stop && weka local rm default -f
  register: remove_local_container
- debug: msg={{ remove_local_container }}


#
- name: Create Drive Container
  shell: |
    weka local setup container --name drives0 --base-port 14000 --memory 2.5GiB --cores 2 --core-ids 5,6 # --memory 0 is auto
  register: create_drive_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_drive_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create Compute Container
  shell: |
    weka local setup container --name compute0 --base-port 14200 --memory 3.5GiB --cores 1 --core-ids 7 --join-ips {{ all_int1_ipaddrs }} # --memory 0 is auto
  register: create_compute_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_compute_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create Frontend Container
  shell: |
    weka local setup container --name frontend0 --base-port 14400 --memory 2.5GiB --cores 1 --core-ids 8 --join-ips {{ all_int1_ipaddrs }}

  register: create_frontend_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_frontend_container }}
  when: inventory_hostname in groups['workers']



# weka cluster default-net set --range 192.168.1.20-200 --gateway=192.168.1.1 --netmask-bits=24
# error: IP 192.168.1.181 is used both as part of the default-net and as HostId<0>'s IP
# weka cluster default-net set --range 192.168.2.20-200 --gateway=192.168.2.1 --netmask-bits=24
# weka cluster default-net set --range 192.168.0.20-200 --gateway=192.168.0.1 --netmask-bits=24

#
- name: Create weka cluster with all nodes and second ip addresses
  shell: |
    weka cluster create {{ all_int1_hostnames }} --host-ips={{ all_int1_ipaddrs }}
  register: create_weka_cluster
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# Need to check if it needs
# weka cluster host
# weka local resources

# weka cluster container cores {{ container_id }} 3 --only-compute-cores
# weka cluster container cores 1 1 --only-drives-cores
# weka cluster container cores 4 1 --only-frontend-cores

#
- name: Get all drives container ids
  shell:
     weka cluster container | awk '{print $1}' | sed 1d
  register: all_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get all drives container ids
  shell:
     weka cluster container | grep drives | awk '{print $1}'
  register: drives_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get all frontend container ids
  shell:
     weka cluster container | frontend | awk '{print $1}'
  register: frontend_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get all compute container ids
  shell:
     weka cluster container | grep compute | awk '{print $1}'
  register: compute_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
# with_indexed_items: "{{ compute_container_ids.stdout_lines }}"
#- name: Print all compute container ids
#  shell: echo {{ item }}
#  with_items: "{{ compute_container_ids.stdout_lines }}"
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
#- name: Print all frontend container ids
#  shell: echo {{ item }}
#  with_items: "{{ frontend_container_ids.stdout_lines }}"
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
#- name: Print all drives container ids
#  shell: echo {{ item }}
#  with_items: "{{ drives_container_ids.stdout_lines }}"
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Allocate a dedicated networking device on a container (to the cluster)
  shell: |
    weka cluster container net add {{ item }} eth1 --netmask=24 --gateway=192.168.1.1
    weka cluster container net add {{ item }} eth2 --netmask=24 --gateway=192.168.2.1
  register: add_network_drive
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_network_drive }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# weka cluster container net add {{ wk_host_id }} eth1 --ips={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }} --netmask=24 --gateway=192.168.1.1
#  # weka cluster container net add {{ wk_host_id }} eth2 --ips={{ hostvars[inventory_hostname]['ansible_eth2']['ipv4']['address'] }} --netmask=24 --gateway=192.168.2.1
#  # weka cluster container net add {{ wk_host_id }} ens224 --ips={{ hostvars[inventory_hostname]['ansible_ens224']['ipv4']['address'] }} --netmask=24 --gateway=192.168.1.1

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# dd if=/dev/zero of=/dev/nvme0n2 bs=1M count=1000
# nvme format -s1 /dev/nvme0n1 -f

#
- name: Delete partition table
  shell: |
    dd if=/dev/zero of=/dev/sdc bs=512 count=1
    dd if=/dev/zero of=/dev/sdb bs=512 count=1
    wipefs --all --force /dev/sdb
    wipefs --all --force /dev/sdc
  register: del_part_table
  when: inventory_hostname in groups['workers']
- debug: msg={{ del_part_table }}
  when: print_debug == true and inventory_hostname in groups['workers']


#
- name: Add NVME drives into each containers
  shell: |
    weka cluster drive add {{ item }} /dev/sdb /dev/sdc --force
  register: add_nvme_drive
  with_items: "{{ drives_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_nvme_drive }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka cluster drive add {{ item }} /dev/nvme0n1 /dev/nvme0n2
  # weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force
  # with_sequence: start=0 end={{ cpu_cores.container_max_id }} # Drive Container ID


# Set the default data networking configuration -> enough?
- name: Configure Default Data Networking
  shell: |
    weka cluster default-net set --range 192.168.2.61-100 --gateway=192.168.2.1 --netmask-bits=24
  register: config_default_network
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ config_default_network }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  #  weka cluster default-net set --range 192.168.1.61-100 --gateway=192.168.1.1 --netmask-bits=24

#
# This memory should be at least 10GB
# 6 is container id
# weka cluster container memory 6 11GiB
- name: Setup local1 weka container with specific memory size
  shell: |
    weka cluster update --data-drives=3 --parity-drives=2
    weka cluster hot-spare 0
    weka cluster update --cluster-name wclu01
  register: setup_data_parity
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ setup_data_parity }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
#- name: Aplply changes of core numbers for containers
#  shell: |
#    weka cluster container apply --all --force
#  register: apply_changes_core_num
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ apply_changes_core_num  }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']


#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Check drivers in the cluster
  shell: |
    weka cloud enable
    # weka cluster drive scan
    # weka cluster container activate
    # weka cluster drive activate
  register: check_cluster_drives
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_cluster_drives }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Start IO in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ start_cluster_io }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Copy expect script file to change admin password
  copy: src=change-admin-pass.sh dest=/root/change-admin-pass.sh mode=0755 owner=root group=root
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Change admin password
  shell: /root/change-admin-pass.sh
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
