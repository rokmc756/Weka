# weka binary check
# ./wekachecker 192.168.0.{181..190}
#
#- name: Install expect
#  shell: |
#    dnf -y install yum-utils
#    yum-config-manager --enable devel
#    yum install -y expect
#    yum-config-manager --disable devel
#  register: install_expect
#- debug: msg={{ install_expect }}

# 2024-02-22 22:48:15 | DEBUG   | stderr </weka/wekanode:25:14>: modinfo: ERROR: could no
- name: Load vfio_pci Kernel module
  shell: |
    modprobe vfio_pci
  register: load_vfio_pci
- debug: msg={{ load_vfio_pci }}

#
- name: Deploy Weka binary
  shell: |
    cd {{ weka.base_path }}/{{ weka_file_name }} ; ./install.sh
  register: install_weka_binary
- debug: msg={{ install_weka_binary }}

####################################################################
# weka local ps
# weka local stop
# weka local rm default -f
# weka local setup host --name default --memory 5GiB
# pdsh -w weka4-node[01-05] weka local ps

#
- name: Stop and Remove local weka container
  shell: |
    weka local stop && weka local rm default -f
  register: remove_local_container
- debug: msg={{ remove_local_container }}

#
- name: Create Drive Container
  shell: |
    weka local setup container --name drives0 --base-port {{ container.drives.port }} --memory {{ container.drives.memory }} \
    --cores {{ container.drives.cpu_core_num }} --join-ips {{ all_int1_ipaddrs }} --management-ips {{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }} \
  register: create_drive_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_drive_container }}
  when: inventory_hostname in groups['workers']
  # --net Network specification - <netdev>/[ip]/[bits]/[gateway]. Or: 'udp' to enforce UDP and
  #       avoid an attempt of auto deduction
  # It's not working # --net udp/{{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}/24/192.168.1.1
  # --core-ids {{ container.drives.cpu_core_ids }} \
  #  eth1/{{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}/24/192.168.1.1
  # --net eth1/{{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}/24



#- name: Validate if containers are running
#  shell: weka status
#  register: check_apply_status
#  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
#  retries: 100
#  delay: 10
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ check_apply_status }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']



#
- name: Create weka cluster with all nodes and second ip addresses
  shell: |
    weka cluster create {{ all_int1_hostnames }} --host-ips={{ all_int1_ipaddrs }} -T infinite
  register: create_weka_cluster
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}
  # weka cluster create {{ all_int1_hostnames }} {{ all_int2_hostnames }} {{ all_int3_hostnames }} --host-ips={{ all_int1_ipaddrs }},{{ all_int2_ipaddrs }},{{ all_int3_ipaddrs }} -T infinite

#
- name: Create Compute Container
  shell: |
    weka local setup container --name compute0 --base-port {{ container.compute.port }} --memory {{ container.compute.memory }} \
    --cores {{ container.compute.cpu_core_num }} \
    --join-ips {{ all_int1_ipaddrs }} --management-ips {{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}
  register: create_compute_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_compute_container }}
  when: inventory_hostname in groups['workers']
  # It's not working # --net udp/{{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}/24/192.168.1.1
  #  --core-ids {{ container.compute.cpu_core_ids }} \
  #  --net eth1/{{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}/24 \


# error: IP 192.168.1.181 is used both as part of the default-net and as HostId<0>'s IP
# weka cluster default-net set --range 192.168.0.20-200 --gateway=192.168.0.1 --netmask-bits=24
# weka cluster default-net set --range 192.168.1.20-200 --gateway=192.168.1.1 --netmask-bits=24
# weka cluster default-net set --range 192.168.2.20-200 --gateway=192.168.2.1 --netmask-bits=24

# Need to check if it needs
# weka cluster host
# weka local resources
# weka cluster container cores {{ container_id }} 3 --only-compute-cores
# weka cluster container cores 1 1 --only-drives-cores
# weka cluster container cores 4 1 --only-frontend-cores

#
- name: Validate if containers are running
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get all drives container ids
  shell:
     weka cluster container | awk '{print $1}' | sed 1d
  register: all_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get all drives container ids
  shell:
     weka cluster container | grep drives | awk '{print $1}'
  register: drives_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get all frontend container ids
  shell:
     weka cluster container | frontend | awk '{print $1}'
  register: frontend_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get all compute container ids
  shell:
     weka cluster container | grep compute | awk '{print $1}'
  register: compute_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
# with_indexed_items: "{{ compute_container_ids.stdout_lines }}"
#- name: Print all compute container ids
#  shell: echo {{ item }}
#  with_items: "{{ compute_container_ids.stdout_lines }}"
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
#- name: Allocate a dedicated networking device on a container (to the cluster)
#  shell: |
#    weka cluster container net add {{ item }} eth1 --ips={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }} --netmask=24 --gateway=192.168.1.1
#  register: add_network_drive
#  with_items: "{{ drives_container_ids.stdout_lines }}"
#  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ add_network_drive }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#  # weka cluster container net add {{ item }} eth2 --netmask=24 --gateway=192.168.2.1
#  # weka cluster container net add {{ wk_host_id }} eth1 --ips={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }} --netmask=24 --gateway=192.168.1.1

#
#- name: Validate if containers are running
#  shell: weka status
#  register: check_apply_status
#  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
#  retries: 100
#  delay: 10
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ check_apply_status }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Delete partition table
  shell: |
    dd if=/dev/zero of=/dev/sdc bs=512 count=1
    dd if=/dev/zero of=/dev/sdb bs=512 count=1
    # wipefs --all --force /dev/sdb
    # wipefs --all --force /dev/sdc
  register: del_part_table
  when: inventory_hostname in groups['workers']
- debug: msg={{ del_part_table }}
  when: print_debug == true and inventory_hostname in groups['workers']
  # nvme format -s1 /dev/nvme0n1 -f


#
- name: Add data devices into drive containers
  shell: |
    weka cluster drive add {{ item }} {{ container.drives.devices }} --force
  register: add_data_devices
  with_items: "{{ drives_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_data_devices }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka cluster drive add {{ item }} /dev/nvme0n1 /dev/nvme0n2
  # weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force
  # with_sequence: start=0 end={{ cpu_cores.container_max_id }} # Drive Container ID


# Set the default data networking configuration -> enough?
#- name: Configure Default Data Networking
#  shell: |
#    weka cluster default-net set --range 192.168.2.61-100 --gateway=192.168.2.1 --netmask-bits=24
#  register: config_default_network
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ config_default_network }}
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  #  weka cluster default-net set --range 192.168.1.61-100 --gateway=192.168.1.1 --netmask-bits=24

#
- name: Configure data drives and cluster name
  shell: |
    weka cluster update --data-drives={{ container.drives.data }} --parity-drives={{ container.drives.parity }}
    weka cluster hot-spare {{ container.drives.hotspare }}
    weka cluster update --cluster-name {{ weka.cluster_name }}
  register: setup_data_parity
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ setup_data_parity }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Validate if containers are running no
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Create Frontend Container
  shell: |
    weka local setup container --name frontend0 --base-port {{ container.frontend.port }} --memory {{ container.frontend.memory }} \
    --cores {{ container.frontend.cpu_core_num }} \
    --join-ips {{ all_int1_ipaddrs }} --management-ips {{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}
  register: create_frontend_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_frontend_container }}
  when: inventory_hostname in groups['workers']
  # It's not working # --net udp/{{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}/24/192.168.1.1
  # only --net udp is working
  # --join-ips {{ all_int1_ipaddrs }} --management-ips={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }} \
  # --core-ids {{ container.frontend.cpu_core_ids }} \
  #  --net eth1/{{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}/24 \

#
- name: Check drivers in the cluster
  shell: |
    weka cloud enable
    # weka cluster drive scan
    # weka cluster container activate
    # weka cluster drive activate
  register: check_cluster_drives
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_cluster_drives }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Start IO in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ start_cluster_io }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Copy expect script file to change admin password
  copy: src=change-admin-pass.sh dest=/home/weka/change-admin-pass.sh mode=0755 owner=weka group=weka
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Change admin password
  shell: sudo /home/weka/change-admin-pass.sh
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

