# weka binary check
#
# ./wekachecker 192.168.0.{181..190}
#

#
- name: Deploy Weka binary
  shell: |
    cd {{ weka.base_path }}/{{ weka_file_name }} ; ./install.sh
  register: install_weka_binary
- debug: msg={{ install_weka_binary }}

#
#- name: Create Weka Cluster
#  shell: |
#    weka cluster create {{ all_nodes_hostname }}
#  register: create_weka_cluster
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ create_weka_cluster }}

####################################################################
# weka local ps
# weka local stop
# weka local rm default -f
# weka local setup host --name default --memory 5GiB
# pdsh -w weka4-node[01-05] weka local ps

#
- name: Stop local weka container
  shell: |
    weka local stop
  register: stop_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ stop_local_weka }}

#
- name: Remove local weka container
  shell: |
    weka local rm default -f
  register: remove_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ remove_local_weka }}

#
- name: Create Drive Container
  shell: |
    weka local setup container --name drive0 --base-port 14000
  register: create_drive_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_drive_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create Compute Container
  shell: |
    weka local setup container --name compute0 --base-port 14200
  register: create_compute_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_compute_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create Frontend Container
  shell: |
    weka local setup container --name frontend0 --base-port 14400
  register: create_frontend_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_frontend_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create weka cluster with all nodes and second ip addresses
  shell: |
    weka cluster create {{ all_nodes_hostname }} --host-ips={{ all_nodes_2nd_ipaddrs }}
  register: create_weka_cluster
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# Need to check if it needs
#- name: Check Wekca Cluster hosts
#  shell: |
#    weka cluster host
#  register: check_weka_cluster_host
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ check_weka_cluster_host }}

# Need to check loop is need
#- name: Check Weka Local Resources
#  shell: |
#    weka local resources
#  register: check_weka_local_resources
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ check_weka_local_resources }}


# first num is node id and second is total core num
#- name: Assign number of cores into each compute containers
#  shell: |
#    weka cluster container cores {{ wk_host_id }} 3 --only-compute-cores
#  register: assign_compute_cores_num
#  with_sequence: start=0 end={{ cpu_cores.container_max_id }}
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ assign_compute_cores_num  }}
#  when: inventory_hostname in groups['workers']

#
#- name: Assign number of cores into each drives containers
#  shell: |
#    weka cluster container cores {{ wk_host_id }} 2 --only-drives-cores
#  register: assign_drive_cores_num
#  with_sequence: start=0 end={{ cpu_cores.container_max_id }}
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ assign_drive_cores_num  }}
#  when: inventory_hostname in groups['workers']

##
#- name: Assign number of cores into each frontends containers
#  shell: |
#    weka cluster container cores {{ wk_host_id }} 1 --only-frontend-cores
#  register: assign_frontend_cores_num
#  with_sequence: start=0 end={{ cpu_cores.container_max_id }}
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ assign_frontend_cores_num }}
#  when: inventory_hostname in groups['workers']
#

# 15 means 0 to 16 as cpu core number and is totoal core numbers
- name: Assign number of cores into each compute/drives/frontends containers
  shell: |
    weka cluster container cores {{ item }} 6 --drives-dedicated-cores {{ cpu_cores.drives_num }} --compute-dedicated-cores {{ cpu_cores.compute_num }} --frontend-dedicated-cores {{ cpu_cores.frontends_num }}
  register: assign_cores_num
  with_sequence: start=0 end={{ cpu_cores.container_max_id }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ assign_cores_num  }}


# It's not work with eth0 before applying configuraiton for container
# weka cluster start-io is not working with eth1 before applying configuration for container
- name: Add network NIC 1
  shell: |
     weka cluster container net add {{ wk_host_id }} eth1 --ips={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }} --netmask=24 --gateway=192.168.219.1
  register: add_network_drive
  when: inventory_hostname in groups['workers']

# when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
# with_sequence: start=0 end={{ cpu_cores.container_max_id }}
# - debug: msg={{ add_network_drive }}
#  when: inventory_hostname in groups['workers']

# Need to define variable of nvme device list after find each device name of NVME on each hosts
# 1 to 4 number of nvme devices is ok to start io, 5 and 6 does not work
- name: Wipe NVMe partition table
  shell: |
    dd if=/dev/zero of=/dev/nvme0n1 bs=1M count=1000
    dd if=/dev/zero of=/dev/nvme0n2 bs=1M count=1000
    # nvme format -s1 /dev/nvme0n1 -f
    # nvme format -s1 /dev/nvme0n2 -f
  register: wipe_nvme_part_table
  ignore_errors: true
  when: inventory_hostname in groups['workers']
  # with_sequence: start=0 end={{ cpu_cores.container_max_id }}
- debug: msg={{ wipe_nvme_part_table }}
  when: inventory_hostname in groups['workers']
  # weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force


# Need to define variable of nvme device list after find each device name of NVME on each hosts
# 1 to 4 number of nvme devices is ok to start io, 5 and 6 does not work
- name: Add NVME drives into each containers
  shell: |
    weka cluster drive add {{ item }} /dev/nvme0n1 /dev/nvme0n2
  register: add_nvme_drive
  with_sequence: start=0 end={{ cpu_cores.container_max_id }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_nvme_drive }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force

# This memory should be at least 10GB
# Need to check reason
#- name: Setup local weka container with specific memory size
#  shell: |
#    weka cluster container memory 4 11GiB
#    weka cluster container memory 5 11GiB
#    weka cluster container memory 6 11GiB
#  register: setup_container_memory
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ setup_container_memory }}
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Setup local1 weka container with specific memory size
  shell: |
    weka cluster update --data-drives=3 --parity-drives=2
    # weka cluster hot-spare 1
    weka cluster update --cluster-name wclu01
  register: setup_data_parity
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ setup_data_parity }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# - meta: end_play

#
#- name: Aplply changes of core numbers for containers
#  shell: |
#    weka cluster container apply --all --force
#  register: apply_changes_core_num
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ apply_changes_core_num  }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# Need to define variable of nvme device list after find each device name of NVME on each hosts
# 1 to 4 number of nvme devices is ok to start io, 5 and 6 does not work
#- name: Add NVME drives into each containers
#  shell: |
#    weka cluster drive add {{ item }} /dev/nvme0n1 /dev/nvme0n2
#  register: add_nvme_drive
#  with_sequence: start=0 end={{ cpu_cores.container_max_id }}
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ add_nvme_drive }}
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#  # weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force

#
- name: Check drivers in the cluster
  shell: |
    weka cloud enable
    weka cluster drive scan
    weka cluster container activate
    weka cluster drive activate
  register: check_cluster_drives
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_cluster_drives }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Start IO in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ start_cluster_io }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
#- name: Copy expect script file to change admin password
#  copy: src=change-admin-pass.sh dest=/root/change-admin-pass.sh mode=0755 owner=root group=root
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
#- name: Change admin password
#  shell: |
#    sh /root/change-admin-pass.sh
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

