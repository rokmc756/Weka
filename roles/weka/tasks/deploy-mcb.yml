---
- name: Create Drive Containers
  shell: |
    weka local setup container --name {{ container.drives.name }} --base-port {{ container.drives.port }} --cores {{ container.drives.cores }} --only-drives-cores \
    --memory {{ container.drives.memory }} --failure-domain {{ ansible_hostname }} --management-ips={{ mgmt_ipaddr }} \
    {{ container.drives.options }} \
    {{ drives_net }}
  register: create_drives_containers
- debug: msg={{ create_drives_containers }}


- name: Create Weka Cluster
  shell: |
    weka cluster create {{ _all_mgmt_ipaddrs }}
  register: create_weka_cluster
  retries: 10
  when: inventory_hostname in groups['control']
- debug: msg={{ create_weka_cluster }}
  when: inventory_hostname in groups['control']


- name: Check if Weka Cluster is Still Creating
  shell: |
    weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Get All Drives Container IDs
  shell: |
    weka cluster container | grep drives | awk '{print $1}'
  register: all_container_ids
  when: inventory_hostname in groups['control']
- debug: msg={{ all_container_ids }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Set Facts of All Container IDs into all hosts
  set_fact:
    all_cont_ids: "{{ all_container_ids.stdout_lines }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['workers'] }}"
  when: inventory_hostname in groups['control']


- name: Cleanup NVME Block Devices
  import_tasks: ext/cleanup-nvme-devices.yml
  when: _weka.nvme == true


- name: Add Devices Into Drives Containers
  shell: |
    weka cluster drive add {{ item }} {{ container.drives.devices }} --force
  register: add_nvme_drive
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ add_nvme_drive }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Create Compute Containers
  shell: |
    weka local setup container --name {{ container.compute.name }} --base-port {{ container.compute.port }} \
    --only-compute-cores --cores {{ container.compute.cores }} \
    --join-ips {{ all_mgmt_ipaddrs }}:{{ container.compute.port }} \
    --management-ips={{ mgmt_ipaddr }} \
    --failure-domain {{ ansible_hostname }} {{ container.compute.options }} \
    {{ compute_net }} \
    {{ container.compute.options }}
  register: create_compute_containers
- debug: msg={{ create_compute_containers }}


- name: Create Frontend Containers
  shell: |
    weka local setup container --name {{ container.frontend.name }} --base-port {{ container.frontend.port }} \
    --only-frontend-cores --cores {{ container.frontend.cores }} --memory {{ container.frontend.memory }} \
    --join-ips {{ all_mgmt_ipaddrs }}:{{ container.frontend.port }} --management-ips={{ mgmt_ipaddr }} \
    --failure-domain {{ ansible_hostname }} {{ container.frontend.options }} \
    {{ frontend_net }}
  register: create_frontend_containers
- debug: msg={{ create_frontend_containers }}


- name: Enable Cloud for Weka
  shell: |
    weka cloud enable
  register: enable_cloud
  until: enable_cloud is succeeded
  retries: 10
  delay: 10
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ enable_cloud }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Setup Drives Container Policy
  shell: |
    weka cluster update --data-drives={{ container.drives.data }} --parity-drives={{ container.drives.parity }}
    weka cluster hot-spare {{ container.drives.hotspare }}
    weka cluster update --cluster-name {{ _weka.cluster_name }}
  register: setup_data_parity
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ setup_data_parity }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Check if Weka Cluster is Still Creating
  shell: |
    weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Check if All Containers are UP
  shell: |
    weka cluster process | sed 1d | awk '{print $7}' | grep -v UP | wc -l
  register: check_all_cont_up
  until: check_all_cont_up.stdout|int ==  0
  retries: 50
  delay: 10
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ check_all_cont_up }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Clear Memory Cache
  shell: |
    sync && echo 3 > /proc/sys/vm/drop_caches
  register: clear_cache_memory
  ignore_errors: true
- debug: msg={{ clear_cache_memory }}
  when: print_debug == true


- name: Start IO In the Weka Cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ start_cluster_io }}
  when: print_debug == true and inventory_hostname in groups['control']

