#
# weka user login {{ weka.admin_user }} {{ weka.admin_default_pass }} && weka status
#
- name: Check if MCB and SCB both are enabled to deploy in groups_vars/all.yml
  debug: msg="Stopped due to both MCB and SCB settings enabled in groups_vars/all.yml. Please choose one of them and rerun playbook"
  failed_when: weka.backend.mcb == true and weka.backend.scb == true

#
- name: Copy expect script file to stop io operation
  template: src=weka-stop-io.sh.j2 dest={{ weka.base_path }}/weka-stop-io.sh owner=root group=root mode=755 force=yes
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Stop IO
  shell: |
    sh {{ weka.base_path }}/weka-stop-io.sh
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Stop and Remove MCB Containers
  shell: |
    weka local stop {{ item }} && weka local disable {{ item }} && weka local rm -f {{ item }}
  register: destroy_weka_containers
  with_items:
    - "smbw"
    - "{{ container.frontend.name }}"
    - "{{ container.compute.name }}"
    - "{{ container.drives.name }}"
  ignore_errors: true
  when: destroy_weka == true and weka.backend.mcb == true and inventory_hostname in groups['workers']
- debug: msg={{ destroy_weka_containers }}
  when: inventory_hostname in groups['workers'] and print_debug == true
# weka local stop frontend0 && weka local disable frontend0 && weka local rm -f frontend0\n"
# delta": "0:00:00.090077", "end": "2024-03-25 01:45:42.412258", "item": "frontend0", "msg": 
# non-zero return code", "rc": 40, "start": "2024-03-25 01:45:42.322181", "stderr": "error: \n
# OPERATION FAILED: THERE ARE ACTIVE WEKA MOUNTS ON THIS HOST.\n    
# Stopping local Weka processes without unmounting all Weka filesystems first might render host unresponsive.\n
# Please unmount all filesystems or use 'weka local stop -f' to stop local Weka processes anyway.\n\u0000",
# - "{{ container.envoy.name }}"

#
- name: Stop and Remove SCB Container
  shell: |
    weka local stop {{ item }} && weka local disable {{ item }} && weka local rm -f {{ item }}
  register: destroy_weka_containers
  with_items:
    - "{{ container.default.name }}"
  ignore_errors: true
  when: destroy_weka == true and weka.backend.scb == true and inventory_hostname in groups['workers']
- debug: msg={{ destroy_weka_containers }}
  when: inventory_hostname in groups['workers'] and print_debug == true
  # - "default"

#
- name: Destroy Weka Containers in All Hosts
  shell: /root/tools/install/wekadestroy -f -y -u {{ ipaddr0 }}
  register: destroy_weka_clu
  ignore_errors: true
  when: remove_weka_bin == true and inventory_hostname in groups['workers']
- debug: msg={{ destroy_weka_clu }}
  when: inventory_hostname in groups['workers'] and print_debug == true

#
- name: Delete tarball file and install directory
  file:
    path: "{{ item }}"
    state: absent
  register: delete_install_binary_dir
  with_items:
    - "{{ weka.base_path }}/{{ weka_file_name }}"
    - "{{ weka.base_path }}/{{ weka_file_name }}.{{ weka.bin_type }}"
    - "{{ weka.base_path }}/{{ weka.tools.name }}"
    - "{{ weka.base_path }}/{{ weka_tools_file_name }}"
    - "{{ weka.base_path }}/{{ weka_tools_file_name }}.{{ weka.tools.bin_type }}"
  ignore_errors: true
  when: remove_weka_bin == true and inventory_hostname in groups['workers']
- debug: msg={{ delete_install_binary_dir }}
  when: inventory_hostname in groups['workers'] and print_debug == true

#
- name: Unmount tmpfs
  shell: |
    umount /opt/weka/data/agent/tmpfss/cross-container-rpc-the-tmpfs
  register: umount_tmpfs
  when: destroy_weka == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  ignore_errors: true
- debug: msg={{ umount_tmpfs }}
  when: inventory_hostname in groups['workers'] and print_debug == true

#
- name: Clear Memory Cache
  shell: |
    sync && echo 3 > /proc/sys/vm/drop_caches
  register: clear_cache_memory
  ignore_errors: true
  when: destroy_weka == true and inventory_hostname in groups['workers']
- debug: msg={{ clear_cache_memory }}
  when: inventory_hostname in groups['workers'] and print_debug == true

#
#- name: Reboot required
#  shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible updates triggered" ) &
#  async: 1200
#  poll: 0
#  when:  destroy_weka == true and inventory_hostname in groups['workers']
#  notify:
#    - Waiting for server to come back after reboot

#
#- meta: flush_handlers

