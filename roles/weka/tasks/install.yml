---
# https://stackoverflow.com/questions/36328907/ansible-get-all-the-ip-addresses-of-a-group
- name: Define fact for all worker's hostname
  set_fact:
    all_nodes_hostname: "{{ groups['workers'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
- debug: msg={{ all_nodes_hostname }}

- name: Define fact for all worker's first ip addresses
  set_fact:
    all_nodes_1st_ipaddrs: "{{ groups['workers'] | map('extract', hostvars, ['ansible_eth0', 'ipv4', 'address']) | join(',') }}"
- debug: msg={{ all_nodes_1st_ipaddrs }}

- name: Define fact for all worker's second ip addresses
  set_fact:
    all_nodes_2nd_ipaddrs: "{{ groups['workers'] | map('extract', hostvars, ['ansible_eth1', 'ipv4', 'address']) | join(',') }}"
- debug: msg={{ all_nodes_2nd_ipaddrs }}

- name: Define fact for weka version
  set_fact:
    weka_file_name: weka-{{ weka.major_version }}.{{ weka.minor_version }}.{{ weka.build_version }}.{{ weka.patch_version }}

#
- name: Check if weka tarball file is already existed
  stat: path={{ weka.base_path }}/{{ weka_file_name }}.{{ weka.bin_type }}
  register: weka_tarball_exists

#
- name: Check if weka installation directory is already existed
  stat: path={{ weka.base_path }}/{{ weka_file_name }}
  register: weka_install_dir_exists

#
- name: Sanity check for existence of "{{ weka.base_path }}/{{ weka_file_name }}".tar file or "{{weka.base_path }}/{{ weka_file_name }}" directory
  fail: msg="Either {{ weka.base_path }}/{{ weka_file_name }}.tar file or {{ weka.base_path }}/{{ weka_file_name }} directory already exists"
  when: weka_tarball_exists.stat.exists == True or weka_install_dir_exists == True

#
- name: Copy weka tarball file from local directory, roles/weka/files
  copy: src={{ weka_file_name }}.tar dest={{ weka.base_path }}/{{ weka_file_name }}.tar mode=0644 owner=root group=root
  register: local_copy_weka
  when: weka.download == false and weka_tarball_exists.stat.exists == false

#
- name: Download weka tarball file
  shell: |
    wget -P {{ weka.base_path }} --auth-no-challenge https://xxxxxxxxxxxxxxxx:@get.weka.io/dist/v1/pkg/{{ weka_file_name }}.tar
  register: download_weka_tarball
  when: weka.download == true and weka_tarball_exists.stat.exists == false


# https://xxxxxxxxxxxxxxxx:@get.weka.io/dist/v1/pkg/{{ weka_file_name }}.tar
#- name: Download weka tarball file
#  get_url:
#    url: "{{ server_url }}"
#    dest: "{{ weka.base_path }}/{{ weka_file_name }}.tar"
#    owner: root
#    group: root
#    mode: 0755
#  when: weka.download == true and weka_tarball_exists.stat.exists == false

#
- name: Unarchive weka tarball file
  unarchive:
    src: "{{ weka.base_path }}/{{ weka_file_name }}.tar"
    dest: "{{ weka.base_path }}/{{ weka_file_name }}"
    owner: "root"
    group: "root"
    mode: "0755"
    remote_src: yes
  register: unarchive_weka_tarball
  when: weka_install_dir_exists.stat.exists == false

#
- name: Install Weka binary
  shell: |
    cd {{ weka.base_path }}/{{ weka_file_name }} ; ./install.sh
  register: install_weka_binary
- debug: msg={{ install_weka_binary }}

#
- name: Create Weka Cluster
  shell: |
    weka cluster create {{ all_nodes_hostname }}
  register: create_weka_cluster
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}


####################################################################
# weka local ps
# weka local stop
# weka local rm default -f
# weka local setup host --name default --memory 5GiB
# pdsh -w weka4-node[01-05] weka local ps

#
- name: Stop local weka container
  shell: |
    weka local stop
  register: stop_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ stop_local_weka }}

#
- name: Remove local weka container
  shell: |
    weka local rm default -f
  register: remove_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ remove_local_weka }}

#
- name: Setup local weka container with specific memory size
  shell: |
    weka local setup host --name default --memory 5GiB
  register: setup_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ setup_local_weka }}

#
- name: Create weka cluster with all nodes and second ip addresses
  shell: |
    weka cluster create {{ all_nodes_hostname }} --host-ips={{ all_nodes_2nd_ipaddrs }}
  register: create_weka_cluster
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}

#
- name: Check Wekca Cluster hosts
  shell: |
    weka cluster host
  register: check_weka_cluster_host
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_weka_cluster_host }}

#
- name: Check Weka Local Resources
  shell: |
    weka local resources
  register: check_weka_local_resources
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_weka_local_resources }}

#
- name: Assign number of cores into each compute/drives/frontends containers
  shell: |
    weka cluster container cores 0 3 --drives-dedicated-cores 1 --compute-dedicated-cores 2 --no-frontends
    # weka cluster container cores 0 3 --drives-dedicated-cores 1 --compute-dedicated-cores 2 --no-frontends
    # weka cluster container cores 1 3 --drives-dedicated-cores 1 --compute-dedicated-cores 2 --no-frontends
    # weka cluster container cores 2 3 --drives-dedicated-cores 1 --compute-dedicated-cores 2 --no-frontends
    # weka cluster container cores 3 3 --drives-dedicated-cores 1 --compute-dedicated-cores 2 --no-frontends
    # weka cluster container cores 4 3 --drives-dedicated-cores 1 --compute-dedicated-cores 2 --no-frontends
  register: assign_core_num
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ assign_core_num  }}

#
- name: Apply changes of core numbers for containers
  shell: |
    weka cluster container apply --all --force
  register: apply_changes_core_num
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ apply_changes_core_num  }}

#
- name: Check local conatiners and cluster hosts as well as status
  shell: |
    weka local ps
    weka cluster host
    weka cluster node
    weka status
  register: check_status
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_status  }}

#
- name: Update number of data drives and parity drivers
  shell: |
    weka cluster update --data-drives=3 --parity-drives=2
  register: update_drives_num
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ update_drives_num }}

#
- name: Add NVME drives into each containers
  shell: |
    weka cluster drive add 0 /dev/nvme0n1
    # weka cluster drive add 0 /dev/nvme0n1
    # weka cluster drive add 1 /dev/nvme0n1
    # weka cluster drive add 2 /dev/nvme0n1
    # weka cluster drive add 3 /dev/nvme0n1
    # weka cluster drive add 4 /dev/nvme0n1
  register: add_nvme_drive
  when: inventory_hostname in groups['workers']
- debug: msg={{ add_nvme_drive }}

#
- name: Check drivers in the cluster
  shell: |
    weka cluster drive
  register: check_cluster_drives
  when: inventory_hostname in groups['workers']
- debug: msg={{ check_cluster_drives }}

#
- name: Start IP in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  when: inventory_hostname in groups['workers']
- debug: msg={{ start_cluster_io }}
