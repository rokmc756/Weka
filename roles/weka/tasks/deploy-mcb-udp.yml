# weka binary check
#
# ./wekachecker 192.168.0.{181..190}
#
# 2024-02-22 22:48:15 | DEBUG   | stderr </weka/wekanode:25:14>: modinfo: ERROR: could no
- name: Load vfio_pci Kernel module
  shell: |
    modprobe vfio_pci
  register: load_vfio_pci
- debug: msg={{ load_vfio_pci }}

#
- name: Deploy Weka binary
  shell: |
    cd {{ weka.base_path }}/{{ weka_file_name }} ; ./install.sh
  register: install_weka_binary
- debug: msg={{ install_weka_binary }}

####################################################################
# weka local ps
# weka local stop
# weka local rm default -f
# weka local setup host --name default --memory 5GiB
# pdsh -w weka4-node[01-05] weka local ps

#
- name: Stop local weka container
  shell: |
    weka local stop
  register: stop_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ stop_local_weka }}

#
- name: Remove local weka container
  shell: |
    weka local rm default -f
  register: remove_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ remove_local_weka }}

#
- name: Create Drive Container
  shell: |
    weka local setup container --name drives0 --base-port 14000 --memory 2.5GiB --cores 2 {{ container.drives.options }}       # --core-ids 5,6
  register: create_drive_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_drive_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create Compute Container
  shell: |
    weka local setup container --name compute0 --base-port 14200 --memory 3.5GiB --cores 1 {{ container.compute.options }}      # --core-ids 7, --memory 0 is auto
  register: create_compute_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_compute_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create Frontend Container
  shell: |
    weka local setup container --name frontend0 --base-port 14400 --memory 2.5GiB --cores 1 {{ container.frontend.options  }}   #  --core-ids 8
  register: create_frontend_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_frontend_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create weka cluster with all nodes and second ip addresses
  shell: |
    weka cluster create {{ all_ext1_hostnames }} --host-ips {{ all_int1_ipaddrs }}
  register: create_weka_cluster
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# Need to check if it needs
# weka cluster host
# weka local resources

# weka cluster container cores {{ container_id }} 3 --only-compute-cores
# weka cluster container cores 1 1 --only-drives-cores
# weka cluster container cores 4 1 --only-frontend-cores

#
- name: Get All Container IDs for SCB
  shell: |
    weka cluster container | awk '{print $1}' | sed 1d
  register: all_container_ids
  when: weka.backend.scb == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ all_container_ids }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get All Container IDs for MCB
  shell: |
    weka cluster container | grep drives0 | awk '{print $1}'
  register: all_container_ids
  when: weka.backend.mcb == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ all_container_ids }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Set Facts into all hosts for all container ids
  set_fact:
    all_cont_ids: "{{ all_container_ids.stdout_lines }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['workers'] }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
#- name: Add networks
#  shell:
#    pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev1 }} --ips {{ ipaddr1 }} --netmask 24 --gateway 192.168.1.1"
#    pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev2 }} --ips {{ ipaddr2 }} --netmask 24 --gateway 192.168.2.1"
#    pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev3 }} --ips {{ ipaddr3 }} --netmask 24 --gateway 192.168.2.1"
#  register: add_network_drive
#  delegate_to: "{{ inventory_hostname }}"
#  delegate_facts: True
#  with_items: "{{ all_container_ids.stdout_lines }}"
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ add_network_drive }}
#  when: inventory_hostname in groups['workers']

#
- name: Delete partition table
  shell: |
    dd if=/dev/zero of=/dev/sdc bs=512 count=1; dd if=/dev/zero of=/dev/sdd bs=512 count=1
    wipefs --all --force /dev/sdc; wipefs --all --force /dev/sdd
  register: del_part_table
  when: inventory_hostname in groups['workers']
- debug: msg={{ del_part_table }}
  when: print_debug == true and inventory_hostname in groups['workers']

#
- name: Add NVME drives into each containers
  shell: |
    weka cluster drive add {{ item }} /dev/sdc /dev/sdd
  register: add_nvme_drive
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_nvme_drive }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# This memory should be at least 10GB
# 6 is container id
# weka cluster container memory 6 11GiB

#
- name: Setup local1 weka container with specific memory size
  shell: |
    weka cluster update --data-drives=3 --parity-drives=2
    weka cluster hot-spare 1
    weka cluster update --cluster-name wclu01
  register: setup_data_parity
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ setup_data_parity }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Aplply changes of core numbers for containers
  shell: |
    weka cluster container apply --all --force
  register: apply_changes_core_num
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ apply_changes_core_num  }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Enable Cloud for Weka
  shell: |
    weka cloud enable
  register: enable_cloud
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ enable_cloud }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka cluster drive scan
  # weka cluster container activate
  # weka cluster drive activate

#
- name: Start IO in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ start_cluster_io }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Copy expect script file to change admin password
  template: src=change-admin-pass.sh.j2 dest=/root/change-admin-pass.sh owner=root group=root mode=755 force=yes
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Change admin password
  shell: /root/change-admin-pass.sh
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

