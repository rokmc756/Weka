# ./wekachecker 192.168.0.{181..190}

#
#- name: Confirm if all containers ids has been set as facts in all hosts
#  debug: msg={{ all_cont_ids }}
#  when: inventory_hostname in groups['workers']
#  # when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# modprobe vfio_pci
- name: Enable Devel Repository
  shell: yum-config-manager --enable devel
  when: inventory_hostname in groups['workers']

#
- name: Install Utility RPM Packages
  yum:
    name={{ item }}
    state=latest
  with_items:
    - expect
    - pdsh
    - pdsh-rcmd-ssh
  when: inventory_hostname in groups['workers']
  # export PDSH_RCMD_TYPE='ssh'

#
- name: Deploy Weka binary
  shell: |
    cd {{ weka.base_path }}/{{ weka_file_name }} ; ./install.sh
  register: install_weka_binary
  when: inventory_hostname in groups['workers']
- debug: msg={{ install_weka_binary }}
  when: inventory_hostname in groups['workers']

# weka local ps
# weka local stop
# weka local rm default -f
# weka local setup host --name default --memory 5GiB
# pdsh -w weka4-node[01-05] weka local ps

#
#- name: Stop and Remove local weka container
#  shell: |
#    weka local stop && weka local rm default -f
#  register: remove_local_weka
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ remove_local_weka }}
#  when: inventory_hostname in groups['workers']

#
#- name: Setup local Weka Container with specific memory size
#  shell: |
#    weka local setup host --name default --memory {{ weka.default_mem_size }}
#  register: setup_local_weka
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ setup_local_weka }}
#  when: inventory_hostname in groups['workers']
#  weka local resources -C default memory 3GiB

#
- name: Create weka cluster with all nodes and second ip addresses
  shell: |
    weka cluster create {{ all_int1_ipaddrs1 }}
  register: create_weka_cluster
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka cluster create {{ all_ext1_hostnames }} --host-ips={{ all_int1_ipaddrs }}
  # weka cluster create {{ all_ext1_hostnames }} --host-ips=192.168.1.141,192.168.1.142,192.168.1.143,192.168.2.144,192.168.2.145

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 50
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get all drives container ids
  shell:
     weka cluster container | awk '{print $1}' | sed 1d
  register: all_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ all_container_ids }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Set Facts into all hosts for all container ids
  set_fact:
    all_cont_ids: "{{ all_container_ids.stdout_lines }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['workers'] }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# weka cluster container net add  0 eth0 --label mgmt
# weka cluster container net add  0 eth0 --label mgmt
# weka cluster container net add  0 eth0 --label mgmt
# weka cluster container net add  0 eth0 --label mgmt
# weka cluster container net add  0 eth0 --label mgmt

#
- name: Add networks
  shell: |
    weka cluster container net add  0 eth1 --ips 192.168.1.171 --netmask=24 --label mgmt
    weka cluster container net add  1 eth1 --ips 192.168.1.172 --netmask=24 --label mgmt
    weka cluster container net add  2 eth1 --ips 192.168.1.173 --netmask=24 --label mgmt
    weka cluster container net add  3 eth1 --ips 192.168.1.174 --netmask=24 --label mgmt
    weka cluster container net add  4 eth1 --ips 192.168.1.175 --netmask=24 --label mgmt
    weka cluster container net add  0 eth2 --ips 192.168.1.181 --netmask=24
    weka cluster container net add  1 eth2 --ips 192.168.1.182 --netmask=24
    weka cluster container net add  2 eth2 --ips 192.168.1.183 --netmask=24
    weka cluster container net add  3 eth2 --ips 192.168.1.184 --netmask=24
    weka cluster container net add  4 eth2 --ips 192.168.1.185 --netmask=24
    weka cluster container net add  0 eth3 --ips 192.168.1.191 --netmask=24
    weka cluster container net add  1 eth3 --ips 192.168.1.192 --netmask=24
    weka cluster container net add  2 eth3 --ips 192.168.1.193 --netmask=24
    weka cluster container net add  3 eth3 --ips 192.168.1.194 --netmask=24
    weka cluster container net add  4 eth3 --ips 192.168.1.195 --netmask=24
  register: add_network_drive
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_network_drive }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#  weka cluster container net add  0 eth1 --ips 192.168.1.171 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  1 eth1 --ips 192.168.1.172 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  2 eth1 --ips 192.168.1.173 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  3 eth1 --ips 192.168.1.174 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  4 eth1 --ips 192.168.1.175 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  0 eth2 --ips 192.168.1.191 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  1 eth2 --ips 192.168.1.192 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  2 eth2 --ips 192.168.1.193 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  3 eth2 --ips 192.168.1.194 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  4 eth2 --ips 192.168.1.195 --netmask=24 --gateway=192.168.1.1
#  weka cluster container net add  0 eth3 --ips 192.168.2.171 --netmask=24 --gateway=192.168.2.1
#  weka cluster container net add  1 eth3 --ips 192.168.2.172 --netmask=24 --gateway=192.168.2.1
#  weka cluster container net add  2 eth3 --ips 192.168.2.173 --netmask=24 --gateway=192.168.2.1
#  weka cluster container net add  3 eth3 --ips 192.168.2.174 --netmask=24 --gateway=192.168.2.1
#  weka cluster container net add  4 eth3 --ips 192.168.2.175 --netmask=24 --gateway=192.168.2.1

#- name: Add networks
#  shell:
#    pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev1 }} --ips {{ ipaddr1 }} --netmask 24 --gateway 192.168.1.1"
#    pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev2 }} --ips {{ ipaddr2 }} --netmask 24 --gateway 192.168.2.1"
#    # pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev1 }} --netmask 24" # OK to start-io
#    # pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev2 }} --netmask 24" # OK to start-io
#    # pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev1 }} --ips {{ ipaddr1 }} --netmask 24 --gateway 192.168.1.1"
#    # pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev2 }} --ips {{ ipaddr2 }} --netmask 24 --gateway 192.168.2.1"
#    # pdsh -w {{ hostvars[groups['workers'][0]]['ansible_hostname'] }} "weka cluster host net add {{ item }} {{ netdev3 }} --ips {{ ipaddr3 }} --netmask 24 --gateway 192.168.2.1"
#  register: add_network_drive
#  delegate_to: "{{ inventory_hostname }}"
#  delegate_facts: True
#  with_items: "{{ all_cont_ids }}"
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ add_network_drive }}
#  when: inventory_hostname in groups['workers']
#  # Above 3 cases is ok when using combination of ip addresses with different subnet creating cluster.

#
- name: Delete partition table
  shell: |
    dd if=/dev/zero of=/dev/sdc bs=512 count=1; dd if=/dev/zero of=/dev/sdd bs=512 count=1
    wipefs --all --force /dev/sdc; wipefs --all --force /dev/sdd
  register: del_part_table
  when: inventory_hostname in groups['workers']
- debug: msg={{ del_part_table }}
  when: print_debug == true and inventory_hostname in groups['workers']

#
- name: Add data devices into drive containers
  shell: |
    weka cluster drive add {{ item }} {{ container.drives.devices }}
  register: add_data_devices
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_data_devices }}
  when: print_debug == true == inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force

# weka cluster host
# weka local resources

#- name: Delete partition table
#  shell: |
#    dd if=/dev/zero of=/dev/nvme0n1 bs=1k count=10000
#    dd if=/dev/zero of=/dev/nvme0n2 bs=1k count=10000
#    nvme format /dev/nvme0n1 -f
#    nvme format /dev/nvme0n2 -f
#  register: del_part_table
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ del_part_table }}
#  when: print_debug == true and inventory_hostname in groups['workers']

#
# item is container id and cput_cores.container_number core number to assign
- name: Assign number of cores into each compute/drives/frontends containers
  shell: |
    weka cluster container cores {{ item }} {{ container.total_cores }} --drives-dedicated-cores {{ container.drives.core_num }} --frontend-dedicated-cores {{ container.frontend.core_num }}
  register: assign_cores_num
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ assign_cores_num  }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Dedicate containers if applicable
  shell: |
    weka cluster container dedicate {{ item }} on
  register: dedicate_container
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ dedicate_container }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#- name: Check drivers in the cluster
#  shell: |
#    weka cloud enable
#  register: check_cluster_drives
#  when: inventory_hostname in hostvars[groups['workers'][-1]]['ansible_hostname']
#  #when: inventory_hostname in groups['workers']
#- debug: msg={{ check_cluster_drives }}
#  when: inventory_hostname in hostvars[groups['workers'][-1]]['ansible_hostname']

#- name: Pause for 2 minutes to wait for applying changes of core numbers into containers
#  pause:
#    minutes: 1
#    weka local ps
#    weka cluster host
#    weka cluster node
#    weka status

#
- name: Created a Cluster Name
  shell: |
    weka cluster update --data-drives=3 --parity-drives=2
    weka cluster hot-spare 1
    weka cluster update --cluster-name=jack-kr-clu01
    weka cloud enable
  register: create_cluster_name
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_cluster_name }}

#
- name: Apply changes of core numbers for containers
  shell: |
    weka cluster container apply --all --force
  register: apply_changes_core_num
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ apply_changes_core_num  }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 50
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Apply changes of core numbers for containers
  shell: |
    weka cluster container apply --all --force
  register: apply_changes_core_num
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ apply_changes_core_num  }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 50
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']


# Need to check if there are unknown status
#  weka cluster drive

- name: Start IO in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ start_cluster_io }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Copy expect script file to change admin password
  copy: src=change-admin-pass.sh dest=/root/change-admin-pass.sh mode=0755 owner=root group=root
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Change admin password
  shell: /root/change-admin-pass.sh
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

