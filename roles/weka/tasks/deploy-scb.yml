# ./wekachecker 192.168.0.{181..190}


# shell: yum-config-manager --enable devel
# export PDSH_RCMD_TYPE='ssh'

# weka local ps
# weka local stop

#
#- name: Configure memory size for default container
#  shell: |
#    weka local resources -C default memory {{ container.default.mem_size }}
#  register: config_default_cont_mem_size
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ config_default_cont_mem_size }}
#  when: inventory_hostname in groups['workers']

#
- name: Check if MCB and SCB both are enabled to deploy in groups_vars/all.yml
  debug: msg="Stopped due to both MCB and SCB settings enabled in groups_vars/all.yml. Please choose one of them and rerun playbook"
  failed_when: weka.backend.mcb == true and weka.backend.scb == true

#
- name: Create SCB Container
  shell: |
    weka local setup container --name {{ container.default.name }} --base-port {{ container.default.port }} --memory {{ container.default.mem_size }}
  register: create_scb_cont
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_scb_cont }}
  when: inventory_hostname in groups['workers']
  # weka local setup container --name {{ container.default.name }} --base-port {{ container.drives.port }} --cores {{ container.total_cores }} --memory {{ container.default.mem_size }}

#
#- name: Create Drive Containers
#  shell: |
#    weka local setup container --name {{ container.drives.name }} --base-port {{ container.drives.port }} --cores {{ container.drives.core_num }} --only-drives-cores \
#    --net eth1/{{ ipaddr1 }}/24 --net eth2/{{ ipaddr2 }}/24 \
#    --memory {{ container.drives.memory }} --failure-domain {{ ansible_hostname }} --management-ips={{ ipaddr1 }},{{ ipaddr2 }}
#  register: create_drives_containers
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ create_drives_containers }}
#  when: inventory_hostname in groups['workers']
#  # pdsh -w 192.168.17[1-5] "weka local resources -C drives0"
#  # weka local setup container --name {{ container.drives.name }} --resources-path /tmp/drives0.json --failure-domain {{ ansible_hostname }}

#
- name: Create Weka Cluster With All Hosts and Management IP Addresses
  shell: |
    weka cluster create {{ all_management_ipaddrs }}
  register: create_weka_cluster
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Validate if Weka Cluster is still creating
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 50
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Get All Container IDs
  shell:
     weka cluster container | awk '{print $1}' | sed 1d
  register: all_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ all_container_ids }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Set Facts into All Hosts for All Container IDs
  set_fact:
    all_cont_ids: "{{ all_container_ids.stdout_lines }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['workers'] }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# weka cluster container net add  0 eth0 --label mgmt

#
#- name: Add networks
#  shell: |
#    weka cluster container net add  0 eth1 --ips 192.168.1.171 --netmask 24
#    weka cluster container net add  1 eth1 --ips 192.168.1.172 --netmask 24
#    weka cluster container net add  2 eth1 --ips 192.168.1.173 --netmask 24
#    weka cluster container net add  3 eth1 --ips 192.168.1.174 --netmask 24
#    weka cluster container net add  4 eth1 --ips 192.168.1.175 --netmask 24
#
#    weka cluster container net add  0 eth2 --ips 192.168.1.181 --netmask 24
#    weka cluster container net add  1 eth2 --ips 192.168.1.182 --netmask 24
#    weka cluster container net add  2 eth2 --ips 192.168.1.183 --netmask 24
#    weka cluster container net add  3 eth2 --ips 192.168.1.184 --netmask 24
#    weka cluster container net add  4 eth2 --ips 192.168.1.185 --netmask 24
#
#    weka cluster container net add  0 eth3 --ips 192.168.1.191 --netmask 24
#    weka cluster container net add  1 eth3 --ips 192.168.1.192 --netmask 24
#    weka cluster container net add  2 eth3 --ips 192.168.1.193 --netmask 24
#    weka cluster container net add  3 eth3 --ips 192.168.1.194 --netmask 24
#    weka cluster container net add  4 eth3 --ips 192.168.1.195 --netmask 24
#
#    weka cluster container net add  0 eth4 --ips 192.168.1.201 --netmask 24
#    weka cluster container net add  1 eth4 --ips 192.168.1.202 --netmask 24
#    weka cluster container net add  2 eth4 --ips 192.168.1.203 --netmask 24
#    weka cluster container net add  3 eth4 --ips 192.168.1.204 --netmask 24
#    weka cluster container net add  4 eth4 --ips 192.168.1.205 --netmask 24
#  register: add_network_drive
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ add_network_drive }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']


#    weka cluster container net add  0 eth1 --ips 192.168.1.171 --netmask 24
#    weka cluster container net add  0 eth2 --ips 192.168.1.181 --netmask 24
#    weka cluster container net add  0 eth3 --ips 192.168.1.191 --netmask 24
#    weka cluster container net add  0 eth4 --ips 192.168.1.201 --netmask 24
#
#    weka cluster container net add  1 eth1 --ips 192.168.1.172 --netmask 24
#    weka cluster container net add  1 eth2 --ips 192.168.1.182 --netmask 24
#    weka cluster container net add  1 eth3 --ips 192.168.1.192 --netmask 24
#    weka cluster container net add  1 eth4 --ips 192.168.1.202 --netmask 24
#
#    weka cluster container net add  2 eth1 --ips 192.168.1.173 --netmask 24
#    weka cluster container net add  2 eth2 --ips 192.168.1.183 --netmask 24
#    weka cluster container net add  2 eth3 --ips 192.168.1.193 --netmask 24
#    weka cluster container net add  2 eth4 --ips 192.168.1.203 --netmask 24
#
#    weka cluster container net add  3 eth1 --ips 192.168.1.174 --netmask 24
#    weka cluster container net add  3 eth2 --ips 192.168.1.184 --netmask 24
#    weka cluster container net add  3 eth3 --ips 192.168.1.194 --netmask 24
#    weka cluster container net add  3 eth4 --ips 192.168.1.204 --netmask 24
#
#    weka cluster container net add  4 eth1 --ips 192.168.1.175 --netmask 24
#    weka cluster container net add  4 eth2 --ips 192.168.1.185 --netmask 24
#    weka cluster container net add  4 eth3 --ips 192.168.1.195 --netmask 24
#    weka cluster container net add  4 eth4 --ips 192.168.1.205 --netmask 24
#

#
- name: Set Facts into All Hosts for All Container IDs
  set_fact:
    all_cont_ids: "{{ all_container_ids.stdout_lines }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['workers'] }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']


# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#combining-and-selecting-data
#- name: Add networks
#  shell: |
#    echo "weka cluster host net add {{ item.0 }} {{ item.1 }} --ips {{ ipaddr1 }} --netmask 24"
#    echo "weka cluster host net add {{ item.0 }} {{ item.1 }} --ips {{ ipaddr2 }} --netmask 24"
#    echo "weka cluster host net add {{ item.0 }} {{ item.1 }} --ips {{ ipaddr3 }} --netmask 24"
#    echo "weka cluster host net add {{ item.0 }} {{ item.1 }} --ips {{ ipaddr4 }} --netmask 24"
#    echo "weka cluster host net add {{ item.0 }} {{ item.1 }} --ips {{ ipaddr5 }} --netmask 24"
#  register: add_network_drive
#  with_items:

# - debug: msg={{ all_cont_ids | map('extract', ["{{ netdev2 }}", "{{ netdev3 }}", "{{ netdev4 }}", "{{ netdev5 }}"]) | list }}
# - debug: msg={{ all_cont_ids | combine( [ netdev2 , netdev3 , netdev4 ,  netdev5 ], list_merge='append' ) }}

#  vars:
#    net_dev_list: [ "{{ netdev2 }}", "{{ netdev3 }}", "{{ netdev4 }}", "{{ netdev5 }}" ]

#- set_fact:
#    host_network_info: "{{ dict( [ netdev2, netdev3, netdev4, netdev5 ] | zip( all_cont_ids )) |
#                         dict2items(key_name='cont_id', value_name='netdev') }}"
#  when: print_debug == true == inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#    weka cluster container net add  0 eth1 --ips 192.168.1.171 --netmask 24
#    weka cluster container net add  0 eth2 --ips 192.168.1.181 --netmask 24
#    weka cluster container net add  0 eth3 --ips 192.168.1.191 --netmask 24
#    weka cluster container net add  0 eth4 --ips 192.168.1.201 --netmask 24
#
#    weka cluster container net add  1 eth1 --ips 192.168.1.172 --netmask 24
#    weka cluster container net add  1 eth2 --ips 192.168.1.182 --netmask 24
#    weka cluster container net add  1 eth3 --ips 192.168.1.192 --netmask 24
#    weka cluster container net add  1 eth4 --ips 192.168.1.202 --netmask 24
#
#    weka cluster container net add  2 eth1 --ips 192.168.1.173 --netmask 24
#    weka cluster container net add  2 eth2 --ips 192.168.1.183 --netmask 24
#    weka cluster container net add  2 eth3 --ips 192.168.1.193 --netmask 24
#    weka cluster container net add  2 eth4 --ips 192.168.1.203 --netmask 24
#
#    weka cluster container net add  3 eth1 --ips 192.168.1.174 --netmask 24
#    weka cluster container net add  3 eth2 --ips 192.168.1.184 --netmask 24
#    weka cluster container net add  3 eth3 --ips 192.168.1.194 --netmask 24
#    weka cluster container net add  3 eth4 --ips 192.168.1.204 --netmask 24
#
#    weka cluster container net add  4 eth1 --ips 192.168.1.175 --netmask 24
#    weka cluster container net add  4 eth2 --ips 192.168.1.185 --netmask 24
#    weka cluster container net add  4 eth3 --ips 192.168.1.195 --netmask 24
#    weka cluster container net add  4 eth4 --ips 192.168.1.205 --netmask 24

#- name: Test
#  shell: |
#    echo "{{ item[0] }} {{ item[1].netdev }} {{ item.1.ipaddr }} "
#  delegate_to: "{{ inventory_hostname }}"
#  delegate_facts: True
#  with_nested:
#   - "{{ all_cont_ids }}"
#   - "{{ dict([ netdev1, netdev2, netdev3, netdev4 ] | zip([ ipaddr1, ipaddr2, ipaddr3, ipaddr4, ipaddr5 ])) | dict2items( key_name='netdev', value_name='ipaddr' ) }}"
#  when: print_debug == true and inventory_hostname in groups['workers']
  # when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#  #  # - "{{ all_cont_ids }}"

#
#- name: Test
#  shell: |
#    echo "{{ item[1] }} {{ item[0].netdev }} {{ item[0].ipaddr }} "
#  delegate_to: "{{ inventory_hostname }}"
#  delegate_facts: True
#  with_nested:
#   - "{{ dict([ netdev1, netdev2, netdev3, netdev4 ] | zip([ ipaddr1, ipaddr2, ipaddr3, ipaddr4, ipaddr5 ])) | dict2items( key_name='netdev', value_name='ipaddr' ) }} + {{ all_cont_ids }}"
#  when: print_debug == true and inventory_hostname in groups['workers']
  # when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # - "{{ all_cont_ids }}"


#- vars:
#    var1: "{{ dict([ netdev1, netdev2, netdev3, netdev4 ] | zip([ ipaddr1, ipaddr2, ipaddr3, ipaddr4, ipaddr5 ])) | dict2items( key_name='netdev', value_name='ipaddr' ) }}"

#
- name: Set Facts to combine netdevs and ipaddrs
  set_fact:
    netinfo: "{{ dict([ netdev1, netdev2, netdev3, netdev4, netdev5 ] | zip([ ipaddr1, ipaddr2, ipaddr3, ipaddr4, ipaddr5 ])) | dict2items( key_name='netdev', value_name='ipaddr' ) }}"
  when: inventory_hostname in groups['workers']


# - debug: msg={{ all_cont_ids }}

# - debug: msg={{ netinfo + all_cont_ids }}

- debug: msg={{ netinfo }}
- debug: msg={{ all_cont_ids }}


#- name: Test 1
#  debug: msg={{ dict([ netdev1, netdev2, netdev3, netdev4 ] | zip([ ipaddr1, ipaddr2, ipaddr3, ipaddr4, ipaddr5 ])) | dict2items( key_name='netdev', value_name='ipaddr' ) }} + {{ all_cont_ids }}
#  when: print_debug == true and inventory_hostname in groups['workers']
# when: inventory_hostname in groups['workers']
#- debug: msg={{ add_network_drive }}
#  when: inventory_hostname in groups['workers'] and print_debug == true
  #  - "{{ all_cont_ids }} |  [ {{ netdev2 }}, {{ netdev3 }}, {{ netdev4 }}, {{ netdev5 }} ]"

#- vars:
#    test1: ""


- name: Build Dict
  set_fact:
    cont_ids: >-
      {%- set results = [] -%}
      {%- for item in all_cont_ids -%}
      {%-   set _ = results.append({ 'cont_id': item, 'option': '' }) -%}
      {%- endfor -%}
      {{ results }}


# - debug: msg={{ cont_ids }}


#- name: My dict
#  set_fact:
#    all_netinfo: "{{ all_netinfo | default([]) | combine(cont_ids, netinfo) }}"
#    # all_netinfo: "{{ netinfo | map(cont_ids) | list }}"

# - debug: msg={{ all_netinfo }}

# - meta: end_play

# https://stackoverflow.com/questions/75812817/converting-list-to-list-of-dictionaries-in-ansible-adding-constant-fields-using
# https://serverfault.com/questions/988278/converting-two-lists-into-a-specific-dictionary-so-it-can-be-sorted

    # all_netinfo: "{{ netinfo | product(all_cont_ids) | list }}"
    # all_netinfo: "{{ all_netinfo | default([]) | combine(all_cont_ids, netinfo) }}"
    # all_netinfo: "{{ netinfo | zip( netinfo | map('extract', dict(all_cont_ids) ) | list ) }}"
    # all_netinfo: "{{ netinfo | map('extract', dict(all_cont_ids)) | list }}"
    # all_netinfo: "{{ all_cont_ids | map('extract', dict(netinfo)) | list }}"
    # all_netinfo: "{{ all_cont_ids | zip( all_cont_ids | map('extract', dict(netinfo) ) | list ) }}"
    # all_netinfo: "{{ all_cont_ids | zip(netinfo) |  list }}"
    # all_netinfo: "{{ netinfo | zip(all_cont_ids) |  list }}"
    # all_netinfo: "{{ dict( all_cont_ids | zip(netinfo) ) }}"
    # all_netinfo: "{{ all_cont_ids | zip(netinfo) | sort(attribute='0') | map(attribute='1') | list }}"
    # l3: "{{ l1 | zip( l1 | map('extract', dict(l2) ) | list ) }}"

#
#- debug: msg={{ all_netinfo }}

# - debug: msg={{ all_cont_ids | zip(netinfo) | list }}
# - debug: msg={{ all_cont_ids | zip(netinfo) | list }}

- name: My dict
  set_fact:
    all_netinfo: "{{ all_netinfo | default([]) | combine(cont_ids, netinfo) }}"
#
#
- name: Add networks
  shell: |
    echo "weka cluster host net add {{ item.cont_id }} {{ item.ipaddr }} --ips {{ item.netdev }} --netmask 24"
  register: add_network_drive
  with_items:
    - "{{ all_cont_ids | zip(netinfo) | list }}"
  when: inventory_hostname in groups['workers']
  # my_dict: "{{ all_cont_ids | zip(netinfo) | sort(attribute='1') | map(attribute='0') | list }}"
  #  echo "weka cluster host net add {{ item.0 }} {{ item.1.ipaddr }} --ips {{ item.1.netdev }} --netmask 24"
  # - "{{ all_cont_ids | zip(netinfo) | list }}"
  # - "{{ all_netinfo | default([]) | combine(cont_ids, netinfo) }}"
  #  - "{{ combine(cont_ids, netinfo) }}"

#
- meta: end_play

#
- name: Delete Partition Table
  shell: |
    dd if=/dev/zero of=/dev/sdc bs=512 count=1; dd if=/dev/zero of=/dev/sdd bs=512 count=1
    wipefs --all --force /dev/sdc; wipefs --all --force /dev/sdd
  register: del_part_table
  when: inventory_hostname in groups['workers']
- debug: msg={{ del_part_table }}
  when: print_debug == true and inventory_hostname in groups['workers']

#
- name: Add Drive Devices into Drive Containers
  shell: |
    weka cluster drive add {{ item }} {{ container.drives.devices }}
  register: add_data_devices
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_data_devices }}
  when: print_debug == true == inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force

# weka cluster host
# weka local resources

#- name: Delete partition table
#  shell: |
#    dd if=/dev/zero of=/dev/nvme0n1 bs=1k count=10000
#    dd if=/dev/zero of=/dev/nvme0n2 bs=1k count=10000
#    nvme format /dev/nvme0n1 -f
#    nvme format /dev/nvme0n2 -f
#  register: del_part_table
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ del_part_table }}
#  when: print_debug == true and inventory_hostname in groups['workers']

#
# item is container id and cput_cores.container_number core number to assign
- name: Assign number of cores into each compute/drives/frontends containers
  shell: |
    weka cluster container cores {{ item }} {{ container.total_cores }} --drives-dedicated-cores {{ container.drives.core_num }} --frontend-dedicated-cores {{ container.frontend.core_num }}
  register: assign_cores_num
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ assign_cores_num  }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Dedicate containers if applicable
  shell: |
    weka cluster container dedicate {{ item }} on
  register: dedicate_container
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ dedicate_container }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

- name: Check drivers in the cluster
  shell: |
    weka cloud enable
  register: check_cluster_drives
  when: inventory_hostname in hostvars[groups['workers'][-1]]['ansible_hostname']
  #when: inventory_hostname in groups['workers']
- debug: msg={{ check_cluster_drives }}
  when: inventory_hostname in hostvars[groups['workers'][-1]]['ansible_hostname']

#- name: Pause for 2 minutes to wait for applying changes of core numbers into containers
#  pause:
#    minutes: 1
#    weka local ps
#    weka cluster host
#    weka cluster node
#    weka status

#
- name: Created a Cluster Name
  shell: |
    weka cluster update --data-drives=3 --parity-drives=2
    weka cluster hot-spare 1
    weka cluster update --cluster-name=jack-kr-clu01
    weka cloud enable
  register: create_cluster_name
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_cluster_name }}

#
- name: Apply changes of core numbers for containers
  shell: |
    weka cluster container apply --all --force
  register: apply_changes_core_num
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ apply_changes_core_num  }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Validate if Weka Cluster is still creating
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 50
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Start IO in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ start_cluster_io }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Copy expect script file to change admin password
  copy: src=change-admin-pass.sh dest=/root/change-admin-pass.sh mode=0755 owner=root group=root
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Change admin password
  shell: /root/change-admin-pass.sh
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

