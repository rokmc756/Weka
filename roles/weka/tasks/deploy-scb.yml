# ./wekachecker 192.168.0.{181..190}
# shell: yum-config-manager --enable devel
# export PDSH_RCMD_TYPE='ssh'


- name: Create SCB Container
  shell: |
    weka local setup container --name {{ container.default.name }}
  register: create_scb_cont
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_scb_cont }}
  when: print_debug == true and inventory_hostname in groups['workers']
  # weka local resources -C default memory {{ container.default.mem_size }}
  # weka local setup container --name {{ container.default.name }} --base-port {{ container.default.port }} \
  # --cores {{ container.total_cores }} --memory {{ container.default.mem_size }}


- name: Create Weka Cluster With All Hosts and Management IP Addresses
  shell: |
    weka cluster create {{ _all_mgmt_ipaddrs }}
  register: create_weka_cluster
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ create_weka_cluster }}
  when: print_debug == true and inventory_hostname in groups['control']
  # weka cluster create {{ all_ext1_hostnames }} --host-ips={{ all_mgmt_ipaddrs }} -T infinite


- name: Validate if Weka Cluster is still creating
  shell: |
    weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 20
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Get All Container IDs and Hostnames
  shell:
    weka cluster container | awk '{print $1","$2}' | sed 1d
  register: all_cont_ids0
  when: inventory_hostname in groups['control']
- debug: msg={{ all_cont_ids0 }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Set Array Facts for All Container IDs and Hostnames
  set_fact:
    all_cont_ids: "{{ all_cont_ids | default([]) + [item.split(',')] }}"
  with_items:
    - "{{ all_cont_ids0.stdout_lines }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ all_cont_ids  }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Delegate each Facts into Host matched with Container ID
  set_fact:
    cont_id: "{{ item[0] }}"
    cont_host: "{{ item[1] }}"
  delegate_to: "{{ item[1] }}"
  delegate_facts: True
  register: test1
  with_items:
    - "{{ all_cont_ids }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ test1 }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Print Container ID
  debug: msg={{ cont_id }}
  when: inventory_hostname in groups['workers']


- name: Print Container Hostname
  debug: msg={{ cont_host }}
  when: inventory_hostname in groups['workers']


# https://stackoverflow.com/questions/75812817/converting-list-to-list-of-dictionaries-in-ansible-adding-constant-fields-using
# https://serverfault.com/questions/988278/converting-two-lists-into-a-specific-dictionary-so-it-can-be-sorted
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#combining-and-selecting-data
# all_cont_ids: "{{ all_container_ids.stdout_lines | map('trim') | map('split',' ') }}"
# all_cont_ids: "{{ all_container_ids.stdout_lines | split(',') | list }}"
# all_cont_ids: "{{ all_container_ids.stdout_lines | map('split',' ')}}"
# all_cont_ids: "{{ all_container_ids.stdout_lines | trim | split(',') | combine( { item.split(',')[0] : item.split(',')[1] } ) | list }}"
# - debug: "{{ all_netinfo | default([]) | combine(cont_ids, netinfo) }}"
# - debug: "{{ netinfo | map(cont_ids) | list }}"
# - debug: "{{ netinfo | product(all_cont_ids) | list }}"
# - debug: "{{ netinfo | zip( netinfo | map('extract', dict(all_cont_ids) ) | list ) }}"
# - debug: "{{ all_cont_ids | zip( all_cont_ids | map('extract', dict(netinfo) ) | list ) }}"
# - debug: "{{ all_cont_ids | zip(netinfo) | sort(attribute='0') | map(attribute='1') | list }}"
# - debug: "{{ netinfo | combine(cont_ids, recursive=true) }}"
# - debug: msg={{ all_cont_ids | map('extract', ["{{ netdev2 }}", "{{ netdev3 }}", "{{ netdev4 }}", "{{ netdev5 }}"]) | list }}
# - debug: msg={{ all_cont_ids | combine( [ netdev2 , netdev3 , netdev4 ,  netdev5 ], list_merge='append' ) }}
#
#- set_fact:
#    host_network_info: "{{ dict( [ netdev2, netdev3, netdev4, netdev5 ] | zip( all_cont_ids )) | dict2items(key_name='cont_id', value_name='netdev') }}"
#  debug: msg={{ dict([ netdev1, netdev2, netdev3, netdev4 ] | zip([ ipaddr1, ipaddr2, ipaddr3, ipaddr4, ipaddr5 ])) | dict2items( key_name='netdev', value_name='ipaddr' ) }} + {{ all_cont_ids }}

#- name: How to append item to a exited list
#  set_fact:
#    cont_ids: >-
#      {%- set results = [] -%}
#      {%- for item in all_cont_ids -%}
#      {%-   set _ = results.append({ 'cont_id': item, 'option': '' }) -%}
#      {%- endfor -%}
#      {{ results }}


- name: Set Facts to combine netdevs and ipaddrs
  set_fact:
    netinfo: "{{ dict([ netdev1, netdev2, netdev3, netdev4 ] | zip([ ipaddr1, ipaddr2, ipaddr3, ipaddr4 ])) | dict2items( key_name='netdev', value_name='ipaddr' ) }}"


- name: Add Networks Adpters into Container for DPDK Support
  shell: |
    weka cluster host net add {{ cont_id }} {{ item.netdev }} --ips {{ item.ipaddr }} --netmask 24
  register: add_network_drive
  with_items:
    - "{{ netinfo }}"
  when: _weka.net.conn == "dpdk"
- debug: msg={{ add_network_drive }}
  when: print_debug == true and _weka.net.conn == "dpdk"
  # --gateway 192.168.1.1
  # deletate also works
  # delegate_to: "{{ hostvars[groups['workers'][0]]['ansible_hostname'] }}"
  # delegate_facts: True


- name: Cleanup NVME Block Devices
  import_tasks: ext/cleanup-nvme-devices.yml
  when: _weka.nvme == true


- name: Add Drive Devices into Drive Containers
  shell: |
    weka cluster drive add {{ cont_id }} {{ container.drives.devices }} --force
  register: add_data_devices
- debug: msg={{ add_data_devices }}
  when: print_debug == true
  # weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force
  # --gateway 192.168.1.1
  # deletate also works
  # delegate_to: "{{ hostvars[groups['workers'][0]]['ansible_hostname'] }}"
  # delegate_facts: True


- name: Assign Number of Cores into Each Compute/Drives/Frontends Containers
  shell: |
    weka cluster container cores {{ cont_id }} {{ container.total_cores }} --drives-dedicated-cores {{ container.drives.cores }} \
    --frontend-dedicated-cores {{ container.frontend.cores }}
  register: assign_cores_num
- debug: msg={{ assign_cores_num  }}
  when: print_debug == true
  # deletate also works
  # delegate_to: "{{ hostvars[groups['workers'][0]]['ansible_hostname'] }}"
  # delegate_facts: True


- name: Dedicate Containers if Applicable
  shell: |
    weka cluster container dedicate {{ cont_id }} on
  register: dedicate_container
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
- debug: msg={{ dedicate_container }}
  when: print_debug == true
  # deletate also works
  # delegate_to: "{{ hostvars[groups['workers'][0]]['ansible_hostname'] }}"
  # delegate_facts: True


- name: Check drivers in the cluster
  shell: |
    weka cloud enable
  register: check_cluster_drives
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ check_cluster_drives }}
  when: print_debug == true and inventory_hostname in groups['control']
# weka cluster node


- name: Created a Cluster Name
  shell: |
    weka cluster update --data-drives={{ container.drives.data }} --parity-drives={{ container.drives.parity }}
    weka cluster hot-spare {{ container.drives.hotspare }}
    weka cluster update --cluster-name={{ _weka.cluster_name }}
  register: create_cluster_name
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ create_cluster_name }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Apply changes of core numbers for containers
  shell: |
    weka cluster container apply --all --force
  register: apply_changes_core_num
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ apply_changes_core_num  }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Validate if Changes are still applying
  shell: |
    weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 30
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: inventory_hostname in groups['control']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in groups['control']


- name: Start IO in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  environment:
    WEKA_USERNAME: "{{ _weka.admin_user }}"
    WEKA_PASSWORD: "{{ _weka.admin_default_pass }}"
  when: print_debug == true and inventory_hostname in groups['control']
- debug: msg={{ start_cluster_io }}
  when: print_debug == true and inventory_hostname in groups['control']

