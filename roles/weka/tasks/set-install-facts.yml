# find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n' | sort
- name: Set Facts for Network Devices, Sequence and Prefix after finding alll network devices except lo
  set_fact:
    netseq: "{{ ansible_facts.interfaces | reject( 'search', 'lo' ) | map( 'regex_search' , '[0-9]*$' ) | sort }}"
    netdevs: "{{ ansible_facts.interfaces | reject( 'search', 'lo' ) | sort }}"
    netfix: "{{ ansible_facts.interfaces | reject( 'search', 'lo' ) | map( 'regex_search' , '^[a-zA-Z][a-zA-Z][a-zA-Z]' ) | sort | first }}"
    netcnt: "{{ ansible_facts.interfaces | reject( 'search', 'lo' ) | map( 'regex_search' , '[0-9]*$' ) | sort | count|int - 1 }}"
  when: inventory_hostname in groups['workers']

- name: Set Facts for Number of Total Cores and Virtual Network Adapters
  set_fact:
    tcores: "{{ container.drives.cores|int + container.compute.cores|int + container.frontend.cores|int }}"
  when: inventory_hostname in groups['workers']

#
- name: Check if the number of virtual network adapters is larger than number of cores to assign into all containers"
  fail: msg="The number of virtual network adapters should be larger than number of cores to assign into all containers"
  when: tcores|int > netcnt|int

#- debug: msg={{ netseq }}
#- debug: msg={{ netdevs }}
#- debug: msg={{ netfix }}
#- debug: msg={{ netcnt }}

- set_fact:
    netdev_seq: "{{ dict( range(0,netcnt|int+1) | zip(netseq)) | dict2items(key_name='seq', value_name='end_seq') }}"
- debug: msg={{ netdev_seq }}
  when: print_debug == true and inventory_hostname in groups['workers']

#
- name: Define Variables for Network Device Names and IP Addresses and All Network Addresses Provided by IP Addresses and Prefix of Netdev
  set_fact:
    "{{ 'ipaddr'~item.seq }}": "{{ hostvars[inventory_hostname]['ansible_'~ netfix ~ item.end_seq ].ipv4.address }}"
    "{{ 'all_net'~item.seq~'_ipaddrs' }}": "{{ groups['workers'] | map('extract', hostvars, ['ansible_' ~ netfix ~ item.end_seq, 'ipv4', 'address']) | join(',') }}"
    "{{ 'netdev'~item.seq }}": "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', weka.backend.net['ipaddr'~item.seq] ) | map(attribute='device') | first }}"
  with_items: "{{ netdev_seq }}"
  when: inventory_hostname in groups['workers']

- name: Define Facts for All Hostnames and Management IP Addresses
  set_fact:
    all_ext1_hostnames: "{{ groups['workers'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
    all_management_ipaddrs: "{{ groups['workers'] | map('extract', hostvars, ['ansible_'~ netdev5, 'ipv4', 'address']) | join(' ') }}"
  when: inventory_hostname in groups['workers']

# Examle
#- name: Set HA Fact to Merge IP Addresses
#  set_fact:
#    ha_ips: {% for h in groups['workers'] %}{{hostvars[h]['ansible_' ~ netfix ~ weka.net.ha1]['ipv4']['address']}}+{{ hostvars[h]['ansible_' ~ netfix ~ weka.net.ha2]['ipv4']['address'])}}{% if not loop.last %},{% endif %}{% endfor %}
#  when: inventory_hostname in groups['workers']

# Example of define variables repeatedly with with_items
#- name: Set individual facts for individual HA IPs
#  set_fact:
#    "{{ 'ha_ips'~item }}": "{{ ipaddr1 }}+{{ ipaddr2 }}"
#  with_items: "{{ netseq }}"
#  when: inventory_hostname in groups['workers']

# weka.net['ipaddr'~item] ) | map(attribute='device') | first }}"
- name: Set Facts for HA IP Addresses of Individual Hosts
  set_fact:
    ha_ips0: "{{ vars['ipaddr'~weka.net.ha1] }}+{{ vars['ipaddr'~weka.net.ha2] }}"
  when: inventory_hostname in groups['workers']
- debug: msg={{ ha_ips0 }}
  when: print_debug == true and inventory_hostname in groups['workers']

#
- name: Set Facts for HA IP Addresses of All Hosts
  set_fact:
    ha_ips: "{{ groups['workers'] | map('extract', hostvars, ['ha_ips0']) | join(',') }}"
  when: inventory_hostname in groups['workers']
- debug: msg={{ ha_ips }}
  when: print_debug == true and inventory_hostname in groups['workers']

#
# weka.net['ipaddr'~item] ) | map(attribute='device') | first }}"
- name: Set Facts for HA Join IP Addresses of Individual Hosts
  set_fact:
    ha_join_ips0: "{{ vars['ipaddr'~weka.net.ha1] }},{{ vars['ipaddr'~weka.net.ha2] }}"
  when: inventory_hostname in groups['workers']
- debug: msg={{ ha_join_ips0 }}
  when: print_debug == true and inventory_hostname in groups['workers']

#
- name: Set Facts for HA Join IP Addresses of All Hosts
  set_fact:
    ha_join_ips: "{{ groups['workers'] | map('extract', hostvars, ['ha_join_ips0']) | join(',') }}"
  when: inventory_hostname in groups['workers']
- debug: msg={{ ha_join_ips }}
  when: print_debug == true and inventory_hostname in groups['workers']

# Example of variable appended with_items
#- debug:
#    msg: "{{ vars['ha_ips'~item] }}"
#  with_items: "{{ netseq }}"
#  when: inventory_hostname in groups['workers']
#
# Example of cut last a character in a line
# ha_ips: "{{ ha_ips0[:-1] }}"

#
- name: Define fact for Weka version
  set_fact:
    weka_file_name: "weka-{{ weka.major_version }}.{{ weka.minor_version }}.{{ weka.build_version }}{{ weka.patch_version }}"
    weka_tools_file_name: "{{ weka.tools.name }}-v{{ weka.tools.major_version }}.{{ weka.tools.minor_version }}.{{ weka.tools.patch_version }}"

#- name: Set Facts of Drives Container Network into all Hosts
#  set_fact:
#    drives_net0: "{{ drives_net0 | default([]) + [ '--net ' + vars[ 'netdev'~item ] + '/' + vars[ 'ipaddr'~item ] + '/24' ] }}"
#  with_sequence: start=1 end={{ container.drives.cores|int }}
#  when: weka.net.conn == "dpdk" and inventory_hostname in groups['workers']
#
#
#- name: Set Facts of Drives Container Network into all Hosts
#  set_fact:
#    drives_net: "{{ drives_net0 | flatten | join(' ') }}"
#  when: weka.net.conn == "dpdk" and inventory_hostname in groups['workers']
#
#
#- name: Set Facts of Compute Container Network into all Hosts
#  set_fact:
#    compute_net0: "{{ compute_net0 | default([]) + [ '--net ' + vars[ 'netdev'~item ] + '/' + vars[ 'ipaddr'~item ] + '/24' ] }}"
#  with_sequence: start={{ container.drives.cores|int + 1 }} end={{ container.compute.cores|int + container.drives.cores|int }}
#  when: weka.net.conn == "dpdk" and inventory_hostname in groups['workers']
#
#
#- name: Set Facts of Compute Container Network into all Hosts
#  set_fact:
#    compute_net: "{{ compute_net0 | flatten | join(' ') }}"
#  when: weka.net.conn == "dpdk" and inventory_hostname in groups['workers']
#
#
#- name: Set Facts of Frontend Container Network into all Hosts
#  set_fact:
#    frontend_net0: "{{ frontend_net0 | default([]) + [ '--net ' + vars[ 'netdev'~item ] + '/' + vars[ 'ipaddr'~item ] + '/24' ] }}"
#  with_sequence: start={{ container.compute.cores|int + container.drives.cores|int + 1 }} end={{ container.frontend.cores|int }} end={{ container.compute.cores|int + container.drives.cores|int + container.frontend.cores|int }}
#  when: weka.net.conn == "dpdk" and inventory_hostname in groups['workers']
#
#
#- name: Set Facts of Frontend Container Network into all Hosts
#  set_fact:
#    frontend_net: "{{ frontend_net0 | flatten | join(' ') }}"
#  when: weka.net.conn == "dpdk" and inventory_hostname in groups['workers']

#
- name: Set Facts of Drives Container Net into all hosts
  set_fact:
    drives_net: ""
    compute_net: ""
    frontend_net: ""
  delegate_facts: True
  when: weka.net.conn != "dpdk" and inventory_hostname in groups['workers']

#- set_fact: # Set Fact to Split IP Addresses
#    even: "{{ groups['workers'][::2] }}"
#    odd: "{{ groups['workers'][1::2] }}"

- debug:
    msg: "{{ vars['all_net'~item~'_ipaddrs'].split(',')[0] }}"
  with_items:
    - "{{ weka.net.ha1 }}"
    - "{{ weka.net.ha2 }}"

- name: Check if the rest value exists
  set_fact:
    rest: "{{ weka.host_num|int % 2 }}"
- debug: msg={{ rest }}
  when: print_debug == true and inventory_hostname in groups['workers']

- name: Set number divided in case that rest value not equals to 0
  set_fact:
    llen: "{{ ( weka.host_num|int / 2 ) | int }}"
  when: ( rest|int == 0 )

- name: Set number divided in case that rest value not equals to 0
  set_fact:
    llen: "{{ ( weka.host_num|int / 2 - 0.5 ) | int }}"
  when: ( rest|int != 0 )

- name: Set Facts for left numbers divded in case that rest value not equals to 0
  set_fact:
    rlen: "{{ ( weka.host_num|int - llen|int ) | int }}"

- name: Set Facts for right numbers divded in case that rest value not equals to 0
  debug:
    msg: "{{ llen }} {{ rlen }}"

#- name: Define Variables for Network Device Names and IP Addresses and All Network Addresses Provided by IP Addresses and Prefix of Netdev
#  set_fact:
#    all_ha1_ipaddrs: "{{ groups['workers'] | map('extract', hostvars, ['ansible_'~ netfix ~ weka.net.ha1, 'ipv4', 'address']) | join(',') }}"
#    all_ha2_ipaddrs: "{{ groups['workers'] | map('extract', hostvars, ['ansible_'~ netfix ~ weka.net.ha2, 'ipv4', 'address']) | join(',') }}"
#  when: netfix == "eth" and inventory_hostname in groups['workers']

#
- name: Define Variables for Network Device Names and IP Addresses and All Network Addresses Provided by IP Addresses and Prefix of Netdev
  set_fact:
    all_ha1_ipaddrs: "{{ groups['workers'] | map('extract', hostvars, ['ansible_'~ netfix ~ netseq.1, 'ipv4', 'address']) | join(',') }}"
    all_ha2_ipaddrs: "{{ groups['workers'] | map('extract', hostvars, ['ansible_'~ netfix ~ netseq.2, 'ipv4', 'address']) | join(',') }}"
  when: inventory_hostname in groups['workers']

# Examples
# msg: "{{ dict( [ all_net1_ipaddrs.split(',') | list ] | slice(2) ) }}"
- name: Convert strings seperated with comma to list
  set_fact:
    list_all_ha1: "{{ all_ha1_ipaddrs.split(',') | list }}"
    list_all_ha2: "{{ all_ha2_ipaddrs.split(',') | list }}"

#- debug: msg={{ list_all_ha1[0:llen|int] }}
#  when: print_debug == true and inventory_hostname in groups['workers']
#- debug: msg={{ list_all_ha1[llen|int:weka.host_num|int] }}
#  when: print_debug == true and inventory_hostname in groups['workers']
#- debug: msg={{ list_all_ha2[0:llen|int] }}
#  when: print_debug == true and inventory_hostname in groups['workers']
#- debug: msg={{ list_all_ha2[llen|int:weka.host_num|int] }}
#  when: print_debug == true and inventory_hostname in groups['workers']

#
- name: Split HA IP Addresses from two network interfaces
  set_fact:
    ha1_left: "{{ list_all_ha1[0:llen|int] }}"
    ha1_right: "{{ list_all_ha1[llen|int:weka.host_num|int] }}"
    ha2_left: "{{ list_all_ha2[0:llen|int] }}"
    ha2_right: "{{ list_all_ha2[llen|int:weka.host_num|int] }}"

#- debug: msg={{ ha1_left }}
#  when: print_debug == true and inventory_hostname in groups['workers']
#- debug: msg={{ ha1_right }}
#  when: print_debug == true and inventory_hostname in groups['workers']
#- debug: msg={{ ha2_left }}
#  when: print_debug == true and inventory_hostname in groups['workers']
#- debug: msg={{ ha2_right }}
#  when: print_debug == true and inventory_hostname in groups['workers']

# Combine two list
- name: Paste HA IP Addresses splitted from two network interfaces
  set_fact:
    ha1_ips: "{{ [ ha1_left + ha2_right ] | flatten | join(',') }}"
    ha2_ips: "{{ [ ha2_left + ha1_right ] | flatten | join(',') }}"

#- debug: msg={{ ha1_ips }}
#  when: print_debug == true and inventory_hostname in groups['workers']
#- debug: msg={{ ha2_ips }}
#  when: print_debug == true and inventory_hostname in groups['workers']

# 목록에서 사전 만들기
# 대부분의 언어에서는 쌍 목록에서 사전(맵/연관 배열/해시 등)을 만드는 것이 쉽습니다. Ansible 에는 이를 수행하는 몇 가지 방법이 있으며 가장 적합한 방법은 소스에 따라 달라질 수 있습니다. 당신의 데이터.
# 이 예에서는 {"a": "b", "c": "d"} 를 생성합니다.
#
# 목록이 [key, value, key, value, …]라고 가정하여 구술하는 간단한 목록입니다.
# vars:
#     single_list: [ 'a', 'b', 'c', 'd' ]
#     mydict: "{{ dict(single_list | slice(2)) }}"
# 쌍 목록이 있으면 더 간단합니다.
# vars:
#     list_of_pairs: [ ['a', 'b'], ['c', 'd'] ]
#     mydict: "{{ dict(list_of_pairs) }}"

# Reference
# https://stackoverflow.com/questions/57596946/ansible-looping-over-with-items-n-times
# https://docs.ansible.com/ansible/latest/playbook_guide/complex_data_manipulation.html
# https://stackoverflow.com/questions/43281212/ansible-include-with-array-slices

#############################################################################################################################################################
# Network IP Address Combination when two network interfaces is applied
#############################################################################################################################################################
# 5 : 2 + 2 - 3 + 2, 0
# 6 : 3 + 3 - 3 + 2, 1
# 7 : 3 + 4 - 4 + 2, 1
#
#############################################################################################################################################################
# SSD net storage capacity calculation
#############################################################################################################################################################
# SSD Net Capacity
# = SSD Raw Capacity * ( ( # Failure Domain - Hot Spares )/ # Failure Domain ) * ( Stripe Width + Protection / Stripe Width ) ) * ( 1 - Filesystem Overhead )
#
#############################################################################################################################################################
# Scenario 1: A homogeneous system of 10 servers, each with one terabyte of Raw SSD Capacity, one hot spare, and a protection scheme of 6+2.
#############################################################################################################################################################
# SSDNetCapacity = 10TB * ( 10 - 1 )/10*6(6+2) * 0.9 = 6.075 TB
#
#############################################################################################################################################################
# Scenario 2: A homogeneous system of 20 servers, each with one terabyte of Raw SSD Capacity, two hot spares, and a protection scheme of 16+2.
#############################################################################################################################################################
# SSDNetCapacity = 20TB * (20-2)/20*16/(16+2)*0.9 = 14.4 TB
#
#############################################################################################################################################################

