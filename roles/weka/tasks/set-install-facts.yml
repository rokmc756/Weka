# https://stackoverflow.com/questions/36328907/ansible-get-all-the-ip-addresses-of-a-group
# Find all network device names
# find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n' | sort
- name: Set Facts for Network Devices, Order and Prefix
  set_fact:
    netord: "{{ ansible_facts.interfaces | reject( 'search', 'lo' ) | map( 'regex_search' , '[0-9]$' ) | sort }}"
    netdevs: "{{ ansible_facts.interfaces | reject( 'search', 'lo' ) | sort }}"
    netfix: "{{ ansible_facts.interfaces | reject( 'search', 'lo' ) | map( 'regex_search' , '^[a-zA-Z][a-zA-Z][a-zA-Z]' ) | sort | first }}"
  when: inventory_hostname in groups['workers']

#- debug: msg={{ netord }}
#- debug: msg={{ netdevs }}
#- debug: msg={{ netfix }}

- name: Define Variables for Network Device Names and IP Addresses and All Network Addresses Provided by IP Addresses and Prefix of Netdev
  set_fact:
    "{{ 'netdev'~item }}": "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', weka.net['ipaddr'~item] ) | map(attribute='device') | first }}"
    "{{ 'ipaddr'~item }}": "{{ hostvars[inventory_hostname]['ansible_'~ netfix ~ item ].ipv4.address }}"
    "{{ 'all_net'~item~'_ipaddrs' }}": "{{ groups['workers'] | map('extract', hostvars, ['ansible_' ~ netfix ~ item, 'ipv4', 'address']) | join(',') }}"
  with_items: "{{ netord }}"
  when: inventory_hostname in groups['workers']

- name: Define Facts for All Hostnames and Management IP Addresses
  set_fact:
    all_ext1_hostnames: "{{ groups['workers'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
    all_management_ipaddrs: "{{ groups['workers'] | map('extract', hostvars, ['ansible_'~ netfix ~ '5', 'ipv4', 'address']) | join(' ') }}"
  when: inventory_hostname in groups['workers']

# Example of print Facts
#- debug: msg="{{ 'netdev'~item }}"
#  with_items: "{{ netord }}"
#
#- debug: msg="{{ 'ipaddr'~item }}"
#  with_items: "{{ netord }}"
#
#- debug: msg="{{ 'all_net'~item~'_ipaddrs' }}"
#  with_items: "{{ netord }}"

# Examle
#- name: Set HA Fact to Merge IP Addresses
#  set_fact:
#    ha_ips: {% for h in groups['workers'] %}{{hostvars[h]['ansible_' ~ netfix ~ weka.net.ha1]['ipv4']['address']}}+{{ hostvars[h]['ansible_' ~ netfix ~ weka.net.ha2]['ipv4']['address'])}}{% if not loop.last %},{% endif %}{% endfor %}
#  when: inventory_hostname in groups['workers']

# Example of define variables repeatedly with with_items
#- name: Set individual facts for individual HA IPs
#  set_fact:
#    "{{ 'ha_ips'~item }}": "{{ ipaddr1 }}+{{ ipaddr2 }}"
#  with_items: "{{ netord }}"
#  when: inventory_hostname in groups['workers']


- name: Set Facts for HA IP Addresses of Individual Hosts
  set_fact:
    ha_ips0: "{{ ipaddr1 }}+{{ ipaddr2 }}"
  when: inventory_hostname in groups['workers']
- debug: msg={{ ha_ips0 }}
  when: print_debug == true and inventory_hostname in groups['workers']

- name: Set Facts for HA IP Addresses of All Hosts
  set_fact:
    ha_ips: "{{ groups['workers'] | map('extract', hostvars, ['ha_ips0']) | join(',') }}"
  when: inventory_hostname in groups['workers']
- debug: msg={{ ha_ips }}
  when: print_debug == true and inventory_hostname in groups['workers']


# Example of variable appended with_items
#- debug:
#    msg: "{{ vars['ha_ips'~item] }}"
#  with_items: "{{ netord }}"
#  when: inventory_hostname in groups['workers']
#
# Example of cut last a character in a line
# ha_ips: "{{ ha_ips0[:-1] }}"

#
- name: Define fact for Weka version
  set_fact:
    weka_file_name: "weka-{{ weka.major_version }}.{{ weka.minor_version }}.{{ weka.build_version }}{{ weka.patch_version }}"
    weka_tools_file_name: "{{ weka.tools.name }}-v{{ weka.tools.major_version }}.{{ weka.tools.minor_version }}.{{ weka.tools.patch_version }}"

# Set facts for network adapter, address, netmask
- name: Set Facts of Drives Container Net into all hosts
  set_fact:
    drives_net: "--net {{ netdev1 }}/{{ ipaddr1 }}/24 --net {{ netdev2 }}/{{ ipaddr2 }}/24"
    compute_net: "--net {{ netdev3 }}/{{ ipaddr3 }}/24"
    frontend_net: "--net {{ netdev4 }}/{{ ipaddr4 }}/24"
  delegate_facts: True
  when: weka.net.conn == "dpdk" and inventory_hostname in groups['workers']

- name: Set Facts of Drives Container Net into all hosts
  set_fact:
    drives_net: ""
    compute_net: ""
    frontend_net: ""
  delegate_facts: True
  when: weka.net.conn != "dpdk" and inventory_hostname in groups['workers']


#############################################################################################################################################################
# Network IP Address Combination when two network interfaces is applied
#############################################################################################################################################################
# 5 : 2 + 2 - 3 + 2, 0
# 6 : 3 + 3 - 3 + 2, 1
# 7 : 3 + 4 - 4 + 2, 1
#
#############################################################################################################################################################
# SSD net storage capacity calculation
#############################################################################################################################################################
# SSD Net Capacity
# = SSD Raw Capacity * ( ( # Failure Domain - Hot Spares )/ # Failure Domain ) * ( Stripe Width + Protection / Stripe Width ) ) * ( 1 - Filesystem Overhead )
#
#############################################################################################################################################################
# Scenario 1: A homogeneous system of 10 servers, each with one terabyte of Raw SSD Capacity, one hot spare, and a protection scheme of 6+2.
#############################################################################################################################################################
# SSDNetCapacity = 10TB * ( 10 - 1 )/10*6(6+2) * 0.9 = 6.075 TB
#
#############################################################################################################################################################
# Scenario 2: A homogeneous system of 20 servers, each with one terabyte of Raw SSD Capacity, two hot spares, and a protection scheme of 16+2.
#############################################################################################################################################################
# SSDNetCapacity = 20TB * (20-2)/20*16/(16+2)*0.9 = 14.4 TB
#
#############################################################################################################################################################
