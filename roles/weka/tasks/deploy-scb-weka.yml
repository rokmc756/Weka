# ./wekachecker 192.168.0.{181..190}
#
#- name: Install expect
#  shell: |
#    dnf -y install yum-utils
#    yum-config-manager --enable devel
#    yum install -y expect
#    yum-config-manager --disable devel
#  register: install_expect
#- debug: msg={{ install_expect }}

#
- name: Deploy Weka binary
  shell: |
    cd {{ weka.base_path }}/{{ weka_file_name }} ; ./install.sh
  register: install_weka_binary
  when: inventory_hostname in groups['workers']
- debug: msg={{ install_weka_binary }}
  when: inventory_hostname in groups['workers']

#
####################################################################
# weka local ps
# weka local stop
# weka local rm default -f
# weka local setup host --name default --memory 5GiB
# pdsh -w weka4-node[01-05] weka local ps

#
- name: Stop and Remove local weka container
  shell: |
    weka local stop && weka local rm default -f
  register: remove_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ remove_local_weka }}
  when: inventory_hostname in groups['workers']

#
#
- name: Setup local Weka Container with specific memory size
  shell: |
    weka local setup host --name default --memory {{ weka.default_mem_size }}
    # weka local resources -C default memory 3GiB
  register: setup_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ setup_local_weka }}
  when: inventory_hostname in groups['workers']

#
- name: Create weka cluster with all nodes and second ip addresses
  shell: |
    weka cluster create {{ all_ext1_hostnames }} --host-ips={{ all_ext1_ipaddrs }}
    # weka cluster create {{ all_int1_hostnames }} --host-ips={{ all_int1_ipaddrs }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka cluster create --host-ips={{ all_nodes_1st_ipaddrs }} {{ all_nodes_hostname }}

#
#- name: Delete partition table
#  shell: |
#    dd if=/dev/zero of=/dev/nvme0n1 bs=1k count=10000
#    dd if=/dev/zero of=/dev/nvme0n2 bs=1k count=10000
#    nvme format /dev/nvme0n1 -f
#    nvme format /dev/nvme0n2 -f
#  register: del_part_table
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ del_part_table }}
#  when: print_debug == true and inventory_hostname in groups['workers']


#
- name: Get all drives container ids
  shell:
     weka cluster container | awk '{print $1}' | sed 1d
  register: all_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Delete partition table
  shell: |
    dd if=/dev/zero of=/dev/sdc bs=512 count=1
    dd if=/dev/zero of=/dev/sdd bs=512 count=1
    wipefs --all --force /dev/sdc
    wipefs --all --force /dev/sdd
  register: del_part_table
  when: inventory_hostname in groups['workers']
- debug: msg={{ del_part_table }}
  when: print_debug == true and inventory_hostname in groups['workers']

#
- name: Add data devices into drive containers
  shell: |
    weka cluster drive add {{ item }} /dev/sdc /dev/sdd --force
  register: add_data_devices
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_data_devices }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force
  # with_sequence: start=0 end={{ cpu_cores.container_max_id }} # Drive Container ID
  # dd if=/dev/zero of=/dev/sdc bs=512 count=1
  # dd if=/dev/zero of=/dev/sdb bs=512 count=1
  # wipefs --all --force /dev/sdc
  # wipefs --all --force /dev/sdd

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 50
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
# item is container id and cput_cores.container_number core number to assign
- name: Assign number of cores into each compute/drives/frontends containers
  shell: |
    weka cluster container cores {{ item }} 4 --drives-dedicated-cores {{ container.drives.cpu_core_num }} --frontend-dedicated-cores {{ container.frontend.cpu_core_num }}
  register: assign_cores_num
  with_sequence: start=0 end=4
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ assign_cores_num  }}
  # weka cluster container cores {{ item }} 4 --drives-dedicated-cores {{ container.drives.cpu_core_num }} --compute-dedicated-cores {{ container.compute.cpu_core_num }} --frontend-dedicated-cores {{ container.frontend.cpu_core_num }}

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 50
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#- name: Configure Default Data Networking
#  shell: |
#    weka cluster default-net set --range 192.168.1.61-100 --gateway=192.168.1.1 --netmask-bits=24
#    weka cluster default-net set --range 192.168.2.61-100 --gateway=192.168.2.1 --netmask-bits=24
#  register: config_default_network
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ config_default_network }}
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
# weka cluster default-net set --range 192.168.1.20-200 --gateway=192.168.1.1 --netmask-bits=24
# error: IP 192.168.1.181 is used both as part of the default-net and as HostId<0>'s IP
# weka cluster default-net set --range 192.168.2.20-200 --gateway=192.168.2.1 --netmask-bits=24
# weka cluster default-net set --range 192.168.0.20-200 --gateway=192.168.0.1 --netmask-bits=24

#
# UDP mode does not require this commands
#- name: Add networks
#  shell: |
#    weka user login {{ weka.admin_user }} {{ weka.admin_default_pass }} && \
#    weka cluster container net add {{ item }} eth1 --ips-type=POOL
#    weka user login {{ weka.admin_user }} {{ weka.admin_default_pass }} && \
#    weka cluster container net add {{ item }} eth2 --ips-type=POOL
#  register: add_network_drive
#  with_sequence: start=0 end=4
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
#- debug: msg={{ add_network_drive }}
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Dedicate containers if applicable
  shell: |
    weka cluster container dedicate {{ item }} on
  register: dedicate_container
  with_sequence: start=0 end=4
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ dedicate_container }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Check drivers in the cluster
  shell: |
    weka cloud enable
    # weka cluster drive scan
    # weka cluster container activate
    # weka cluster drive activate
  register: check_cluster_drives
  when: inventory_hostname in hostvars[groups['workers'][-1]]['ansible_hostname']
#  #when: inventory_hostname in groups['workers']
- debug: msg={{ check_cluster_drives }}
  when: inventory_hostname in hostvars[groups['workers'][-1]]['ansible_hostname']

#- name: Pause for 2 minutes to wait for applying changes of core numbers into containers
#  pause:
#    minutes: 1
#
#    weka local ps
#    weka cluster host
#    weka cluster node
#    weka status

#- name: Pause for 2 minutes to wait for applying changes of core numbers into containers
#  pause:
#    minutes: 5

#
- name: Created a Cluster Name
  shell: |
    weka cluster update --cluster-name=jack-kr-clu01
  register: create_cluster_name
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_cluster_name }}

# weka cluster host
# weka local resources

#
#- name: Check drivers in the cluster
#  shell: |
#    weka cluster drive scan
#    weka cluster drive activate
#  register: check_cluster_drives
#  when: inventory_hostname in hostvars[groups['workers'][-1]]['ansible_hostname']
#  #when: inventory_hostname in groups['workers']
#- debug: msg={{ check_cluster_drives }}
#  when: inventory_hostname in hostvars[groups['workers'][-1]]['ansible_hostname']

#
- name: Apply changes of core numbers for containers
  shell: |
    weka cluster container apply --all --force
  register: apply_changes_core_num
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ apply_changes_core_num  }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 50
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Start IO in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ start_cluster_io }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Copy expect script file to change admin password
  copy: src=change-admin-pass.sh dest=/root/change-admin-pass.sh mode=0755 owner=root group=root
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Change admin password
  shell: /root/change-admin-pass.sh
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

