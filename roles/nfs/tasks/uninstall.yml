# Need to check if fs exists for nfs backends
# $ weka fs
# FILESYSTEM ID  FILESYSTEM NAME  USED SSD  AVAILABLE SSD  USED TOTAL  AVAILABLE TOTAL  THIN PROVISIONED  THIN PROVISIONED MINIMUM SSD  THIN PROVISIONED MAXIMUM SSD

# For MCB
# $ weka cluster process | grep FRONTEND
# 1           weka4-node01  default    192.168.219.181  UP      4.2.7.64  FRONTEND    UDP      1    1.47 GB  0:07:26h
# 21          weka4-node02  default    192.168.219.182  UP      4.2.7.64  FRONTEND    UDP      1    1.47 GB  0:07:26h
# 41          weka4-node03  default    192.168.219.183  UP      4.2.7.64  FRONTEND    UDP      1    1.47 GB  0:07:21h
# 61          weka4-node04  default    192.168.219.184  UP      4.2.7.64  FRONTEND    UDP      1    1.47 GB  0:07:26h
# 81          weka4-node05  default    192.168.219.185  UP      4.2.7.64  FRONTEND    UDP      1    1.47 GB  0:07:16h

# $ weka nfs global-config set --mountd-port <mountd-port>
# The mountd service receives requests from clients to mount to the NFS server.
# When working with interface groups (with allow-manage-gids=on),
# it is possible to set it explicitly, rather than have it randomly selected on each server startup.
# This allows an easier setup of the firewalls to allow that port.
# Use the following command to set and view the mountd configuration:
# weka nfs global-config set --mountd-port <mountd-port> and weka nfs global-config show.

# For DNS?
# weka nfs rules add dns jtest-client-group01 weka4-node07.jtest.pivotal.io
# weka nfs rules delete dns jtest-client-group01 weka4-node07.jtest.pivotal.io

# Need to check if it's OK?
# $ weka nfs interface-group
# NAME         SUBNET MASK    GATEWAY      TYPE  STATUS  IPS                                                                                                                                                   PORTS                                                                                            ALLOW MANAGE GIDS
# jtest-nfs01  255.255.255.0  192.168.0.1  NFS   OK      192.168.0.221, 192.168.0.222, 192.168.0.223, 192.168.0.224, 192.168.0.225, 192.168.0.226, 192.168.0.227, 192.168.0.228, 192.168.0.229, 192.168.0.230  [     host_uid: f62e2a1b-704e-01b5-5baa-2b225f4a4084,host_id: HostId<0>,port: eth0,status: OK ]  True
# $ weka nfs permission
# FILESYSTEM  GROUP  PATH  TYPE  SQUASHING  ANONYMOUS UID  ANONYMOUS GID  OBS DIRECT  MANAGE GIDS  MOUNT OPTIONS  PRIVILEGED PORT  SUPPORTED VERSIONS

# Need to check if it exists?
# $ weka nfs clients show
# HOSTID  CLIENT IP  IDLE TIME  NFSV3 OPS  NFSV4 OPS  NFSV4 OPEN OPS  NFSV4 CLOSE OPS

- name: Get All Container IDs
  shell: |
    weka cluster container | awk '{print $1}' | sed 1d
  register: all_container_ids
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ all_container_ids }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Delete NFS Permission
  shell: |
    weka nfs permission delete {{ nfs.fs.config }} {{ nfs.client.group }} -f
  register: delete_nfs_perms
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ delete_nfs_perms }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
# weka nfs permission add nfs jtest-client-group01 --path /xxxx/xxx \
# --permission-type 0777 --squash squash --anon-uid anon-uid --anon-gid anon-gid \
# --obs-direct obs-direct --manage-gids manage-gids --privileged-port privileged-port \
# --supported-versions 3
# weka nfs permission delete <filesystem> <group> [--path path]

#
- name: Delete NFS ip-range
  shell: |
    weka nfs interface-group ip-range delete {{ nfs.interface.group }} {{ nfs.net.iprange }} -f
  register: delete_nfs_ip_range
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ delete_nfs_ip_range }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Delete rule to ensure clients get matched and associated with
  shell: |
    weka nfs rules delete ip {{ nfs.client.group }} {{ nfs.net.network }}/{{ nfs.net.subnet }}
  register: del_rule_client_group
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ del_rule_client_group }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Delete a group for NFS clients
  shell: |
    weka nfs client-group delete {{ nfs.client.group }} -f
  register: del_ifg_grp_nfs_client
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ del_ifg_grp_nfs_client }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Delete NFS configuration filesystem
  shell: |
    weka nfs interface-group port delete {{ nfs.interface.group }} {{ item }} {{ nfs.net.ifname }} -f
  register: del_ifg_grp_port
  with_items: "{{ all_container_ids.stdout_lines }}"
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ del_ifg_grp_port }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
# First we set up a simple NFS service, which requires the use of Interface Groups
- name: Delete Interface Groups for NFS Service
  shell: |
    weka nfs interface-group delete {{ nfs.interface.group }} -f
  register: delete_nfs_ifg_grp
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ delete_nfs_ifg_grp }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# Here we examine the filesystems; a configuration filesystem for the protocols in use, and one user filesystem (`default`) to be shared out via those protocols.
- name: Examine filesystem for NFS Protocol
  shell: |
    weka fs --output name,availableTotal
  register: examine_fs_nfs_protocol
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ examine_fs_nfs_protocol }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Unset global config for NFS
  shell: |
    weka nfs global-config set --config-fs ""
  register: unset_global_config_fs
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ unset_global_config_fs }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
  # weka nfs global-config set --config-fs jtest-default-fs01
  # weka nfs global-config show

