# weka binary check
#
# ./wekachecker 192.168.0.{181..190}
#
# 2024-02-22 22:48:15 | DEBUG   | stderr </weka/wekanode:25:14>: modinfo: ERROR: could no
- name: Load vfio_pci Kernel module
  shell: |
    modprobe vfio_pci
  register: load_vfio_pci
- debug: msg={{ load_vfio_pci }}

#
- name: Deploy Weka binary
  shell: |
    cd {{ weka.base_path }}/{{ weka_file_name }} ; ./install.sh
  register: install_weka_binary
- debug: msg={{ install_weka_binary }}

####################################################################
# weka local ps
# weka local stop
# weka local rm default -f
# weka local setup host --name default --memory 5GiB
# pdsh -w weka4-node[01-05] weka local ps

#
- name: Stop local weka container
  shell: |
    weka local stop
  register: stop_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ stop_local_weka }}

#
- name: Remove local weka container
  shell: |
    weka local rm default -f
  register: remove_local_weka
  when: inventory_hostname in groups['workers']
- debug: msg={{ remove_local_weka }}

#
- name: Create Drive Container
  shell: |
    weka local setup container --name drives0 --base-port 14000 --memory 2.5GiB --cores 2
    # weka local setup container --name drives0 --base-port 14000 --memory 2.5GiB --cores 2 --core-ids 5,6
  register: create_drive_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_drive_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create Compute Container
  shell: |
    weka local setup container --name compute0 --base-port 14200 --memory 3.5GiB --cores 1
    # weka local setup container --name compute0 --base-port 14200 --memory 3.5GiB --cores 1 --core-ids 7  # --memory 0 is auto
  register: create_compute_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_compute_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create Frontend Container
  shell: |
    weka local setup container --name frontend0 --base-port 14400 --memory 2.5GiB --cores 1
    # weka local setup container --name frontend0 --base-port 14400 --memory 2.5GiB --cores 1 --core-ids 8
  register: create_frontend_container
  when: inventory_hostname in groups['workers']
- debug: msg={{ create_frontend_container }}
  when: inventory_hostname in groups['workers']

#
- name: Create weka cluster with all nodes and second ip addresses
  shell: |
    weka cluster create weka4-node01-01 weka4-node02-01 weka4-node03-01 weka4-node04-01 weka4-node05-01 weka4-node06-01 --host-ips=192.168.1.151,192.168.1.152,192.168.1.153,192.168.1.154,192.168.1.155,192.168.1.156
  register: create_weka_cluster
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ create_weka_cluster }}

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

# Need to check if it needs
# weka cluster host
# weka local resources

# weka cluster container cores {{ container_id }} 3 --only-compute-cores
# weka cluster container cores 1 1 --only-drives-cores
# weka cluster container cores 4 1 --only-frontend-cores

# It's not work with eth0 before applying configuraiton for container
# weka cluster start-io is not working with eth1 before applying configuration for container
- name: Add network NIC 1
  shell: |
     weka cluster container net add {{ wk_host_id }} ens161 --ips={{ hostvars[inventory_hostname]['ansible_ens161']['ipv4']['address'] }} --netmask=24 --gateway=192.168.1.1
  register: add_network_drive
  when: inventory_hostname in groups['workers']
  #   weka cluster container net add {{ wk_host_id }} ens224 --ips={{ hostvars[inventory_hostname]['ansible_ens224']['ipv4']['address'] }} --netmask=24 --gateway=192.168.1.1


# dd if=/dev/zero of=/dev/nvme0n2 bs=1M count=1000
# nvme format -s1 /dev/nvme0n1 -f
# weka cluster drive add {{ item }} /dev/vdb /dev/vdc --allow-format-non-wekafs-drives --force

# Need to define variable of nvme device list after find each device name of NVME on each hosts
# 1 to 4 number of nvme devices is ok to start io, 5 and 6 does not work
- name: Add NVME drives into each containers
  shell: |
    weka cluster drive add {{ item }} /dev/nvme0n1 /dev/nvme0n2
  register: add_nvme_drive
  with_sequence: start=0 end=5  # Drive Container ID
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ add_nvme_drive }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']


# This memory should be at least 10GB
# 6 is container id
# weka cluster container memory 6 11GiB

#
- name: Setup local1 weka container with specific memory size
  shell: |
    weka cluster update --data-drives=3 --parity-drives=2
    weka cluster hot-spare 1
    weka cluster update --cluster-name wclu01
  register: setup_data_parity
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ setup_data_parity }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Aplply changes of core numbers for containers
  shell: |
    weka cluster container apply --all --force
  register: apply_changes_core_num
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ apply_changes_core_num  }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Validate if still appying
  shell: weka status
  register: check_apply_status
  until: check_apply_status.stderr.find("Make sure weka is running on this host by running") == -1
  retries: 100
  delay: 10
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_apply_status }}
  when: print_debug == true and inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Check drivers in the cluster
  shell: |
    weka cloud enable
    weka cluster drive scan
    weka cluster container activate
    weka cluster drive activate
  register: check_cluster_drives
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ check_cluster_drives }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
- name: Start IO in the cluster
  shell: |
    weka cluster start-io
  register: start_cluster_io
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']
- debug: msg={{ start_cluster_io }}
  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
#- name: Copy expect script file to change admin password
#  copy: src=change-admin-pass.sh dest=/root/change-admin-pass.sh mode=0755 owner=root group=root
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

#
#- name: Change admin password
#  shell: |
#    sh /root/change-admin-pass.sh
#  when: inventory_hostname in hostvars[groups['workers'][0]]['ansible_hostname']

