# WekaIO Kickstart file
#
# vince@weka.io
#
# Note:
# /run/install/repo/ is the ISO disk image unless using ftp for kickstart
# /mnt/sysroot/      is the system image that's been installed

#  Note that the MINIMUM size of the boot disk is 111GB! In case of Jack's test it was created about 150GB on VM.

# PRE INSTALL SECTION
#
%pre --logfile=/tmp/ks-pre.log --erroronfail
echo
echo "$(env TZ=Asia/Seoul date) Starting kickstart 1st pre section"
echo

# Get partitioner.sh script from PXE server - Added by Jack
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/partitioner.sh -P /run/install/repo/
chmod 755 /run/install/repo/partitioner.sh

# Get kickstart config and partmap files for disk partitioning - Added by Jack
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/ks.cfg -P /run/install/

# ks-firewall ks-local-repos ks-postinstall ks-boot-net-ip ks-packagelist partmap
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/ks-firewall -P /run/install/repo/
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/ks-local-repos -P /run/install/repo/
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/ks-postinstall -P /run/install/repo/
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/ks-boot-net-ip -P /run/install/repo/
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/ks-packagelist -P /run/install/repo/
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/partmap -P /run/install/repo/

# Find the 2 smallest drives in the system that are the same size, in case we should have mirrored boot drives (may be only one)
echo Starting boot drive selection process

# We need a temp file because just piping the first while loop into the second creates a subshell and the ARRAYs won't be set
TMPFILE=$(mktemp)
lsblk -b -d -o NAME,SIZE,ROTA,TYPE -n | sort -n --key=2 | grep disk | grep -v pmem | while read NAME SIZE ROTA TYPE; do
        GB_CAP=$[SIZE/1024/1024/1024]
        #echo $GB_CAP
        # we want only HDDs that are more than 111GB and less than 1.5TB in size
        if [ $GB_CAP -gt 120 ]; then
            echo ${NAME} ${GB_CAP}
        fi
done | head -2 > $TMPFILE

NAME_ARRAY=()
SIZE_ARRAY=()
while read NAME SIZE; do
        echo $NAME $SIZE
        NAME_ARRAY+=($NAME)
        SIZE_ARRAY+=($SIZE)
done  < $TMPFILE
echo name array is ${NAME_ARRAY[@]}
echo size array is ${SIZE_ARRAY[@]}

# we're done with the temp file now
rm -f $TMPFILE

# sanity check
if [ ${#SIZE_ARRAY[@]} -eq 0 ]; then
        echo ERROR: no drives are in the system?
        echo Terminating
        exit 1
elif [ ${SIZE_ARRAY[0]} -lt 120 ]; then
        echo ERROR: This image requires a minimum of a 120GB boot drive
        echo Terminating
        exit 1
fi

if [ ${#SIZE_ARRAY[@]} -gt 1 ]; then
        echo There are two+ drives in the system
        if [ ${SIZE_ARRAY[0]} != ${SIZE_ARRAY[1]} ]; then
                # different size drives, so use the first (smaller) one
                echo different size drives, using smaller one
                BDEV1=${NAME_ARRAY[0]}
                BDEV2=""
        else
                echo boot drive mirroring enabled
                BDEV1=${NAME_ARRAY[0]}
                BDEV2=${NAME_ARRAY[1]}
        fi
else
        # only one boot drive
        echo only one boot drive
        BDEV1=${NAME_ARRAY[0]}
        BDEV2=""
fi

echo Boot devices are $BDEV1 and $BDEV2
echo
# Need these as a comma-separated list for the partitioning commands below
BOOTDEVS=`echo $BDEV1 $BDEV2 | sed 's/ /,/g'`

# Build the part-include file that gets used later in the %nclude directive
PART=/tmp/part-include

# Wipe the drives, if any partitions exist
echo 'Wiping the boot drive(s)'
echo "ignoredisk --only-use=$BOOTDEVS" >> $PART
echo "clearpart --drives=$BOOTDEVS --all --initlabel --disklabel=gpt" >> $PART
echo "zerombr" >> $PART

/run/install/repo/partitioner.sh $(echo $BDEV1 $BDEV2) >> $PART
echo
echo Partitions set.  Partition commands are:
cat $PART

echo
echo "$(env TZ=Asia/Seoul date) Finished kickstart 1st pre section"
echo
exit 0
%end
#
# END OF PRE INSTALL SECTION

# License agreement
eula --agreed

# Reboot after installation
# reboot --eject
# reboot

# version=RHEL8
# Use graphical install
# graphical
# Use text install
text

# Added by Jack
url --url="ftp://192.168.0.99/pub/Linux/Weka/4.2/BaseOS"

# Added by Jack
repo --name="OFED58" --baseurl="ftp://192.168.0.99/pub/Linux/Weka/4.2/OFED58"
repo --name="Weka" --baseurl="ftp://192.168.0.99/pub/Linux/Weka/4.2/Weka"
repo --name="LTS" --baseurl="ftp://192.168.0.99/pub/Linux/Weka/4.2/LTS"
repo --name="AppStream" --baseurl="ftp://192.168.0.99/pub/Linux/Weka/4.2/AppStream"

# Allow tmpfs to be used
services --enabled=tmp.mount

%include /run/install/repo/ks-local-repos

# Built in the %pre (above) - partition the drives
%include /tmp/part-include


# PACKAGES SECTION
#%packages
#@^minimal-environment
#
#%end
%packages
%include /run/install/repo/ks-packagelist
%end
# END OF PACKAGES SECTION

# Keyboard layouts
keyboard --xlayouts='kr'
# System language
lang en_US.UTF-8

# Network information
# network  --bootproto=dhcp --device=link --activate --hostname=weka-beta-os.localdomain
# network command gets generated in pre section 2
# (either dhcp or static, depending on what's available)
# and included here:
network --device=eth0 --bootproto=dhcp --device=link --nameserver=192.168.0.101,8.8.8.8,168.126.63.1 --noipv6 --activate
network --device=eth1 --bootproto=dhcp --device=link --nameserver=192.168.0.101,8.8.8.8,168.126.63.1 --noipv6 --activate
# network --device=ens0s3 --bootproto=dhcp --device=link --nameserver=192.168.0.101,8.8.8.8,168.126.63.1 --noipv6 --activate
# network --device=ens0s8  --bootproto=dhcp --device=link --nameserver=192.168.0.101,8.8.8.8,168.126.63.1 --noipv6 --activate

# General network settings for the installation
# network --hostname=weka4-temp --bootproto=static --device=eth0 --gateway=192.168.0.1 --ip=192.168.0.180 --nameserver=192.168.0.101,8.8.8.8,168.126.63.1 --netmask=255.255.255.0 --ipv6=auto --activate
# network --hostname=weka4-temp --bootproto=static --device=enp7s0 --gateway=192.168.219.1 --ip=192.168.219.180 --nameserver=8.8.8.8 --netmask=255.255.255.0 --onboot=off --ipv6=auto --activate

# Need to check where it came from
# %include /tmp/netinclude

# Installation Type include
# is determined in the %pre sections based on kernel args.
# /tmp/typeinclude should have in it either
#
# Use CDROM installation media
# cdrom
#
# or something similar to:
# url --url http://172.29.5.26/wekaiso
#
# Need to check where it came from
# %include /tmp/typeinclude

# Firewall configuration
# firewall --disabled
# enable ssh, nfs, smb, weka, and s3
# firewall --enabled --ssh --service=nfs --service=nfs3 --service=samba --port=14000-15000:tcp --port=14000-15000:udp --port=9001:tcp
%include /run/install/repo/ks-firewall

# SELinux configuration
selinux --disabled

# Run the Setup Agent on first boot
firstboot --disable

# Auto partition
# autopart --type=lvm
#
# Configure the partition removal for the system drive.
#
# Set the target device for the system here!
# clearpart --all --initlabel --drives=sda --disklabel=gpt
# ignoredisk --only-use=vda  # sda
#
# Partition clearing information
# clearpart --none --initlabel

# System timezone
timezone Asia/Seoul --isUtc

# Do not configure the X Window System
skipx

# System services
# services --enabled="chronyd"

# Grub Booloader settings
# bootloader --location=mbr --driveorder=sda --append="net.ifnames=0 biosdevname=0"
bootloader --location=mbr --append="net.ifnames=0 biosdevname=0"

# Root password
rootpw --iscrypted $6$GnrzVCz/9Bb3vTGY$fG7FJmHlNFVWzEmleJ5kXbQpV32AP3cHohoexYA/.FtNg910PIlz0baonMyjNUw5wbtaSbGoLVVXayruFDN.f.
user --groups=wheel --name=jomoon --password=$6$pWL1trmWMmk6h.XH$H5Tu7Uk0XfXWXFai/b.nsz9R2REIDsE0spLIFNLFIrbUSxPLwa1te3bUvTeM6jiVI4V9gwvBYDHkAIGvB6Jnu0 --iscrypted --gecos="Jack Moon"
user --groups=wheel --name=weka --password=$6$pWL1trmWMmk6h.XH$H5Tu7Uk0XfXWXFai/b.nsz9R2REIDsE0spLIFNLFIrbUSxPLwa1te3bUvTeM6jiVI4V9gwvBYDHkAIGvB6Jnu0 --iscrypted --gecos="Weka Admin"
# The above password should be generated for SHA512 algorithm by running 'openssl password -6 changeme' command

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

# POST INSTALL SECTION
%post --nochroot --log=/mnt/sysimage/root/ks-post.log
echo
echo "$(env TZ=Asia/Seoul date) Starting kickstart post section"
echo

echo
echo Welcome to Weka!
echo

# Get network config files of ethX devices for dhcp settings added by Jack
echo Download ifcfg-ethX files and reconfigure network after removing previous one automatically generated
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/ifcfg-eth0 -P /run/install/repo/
wget -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/ifcfg-eth1 -P /run/install/repo/

rm -f /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-en*
cp /run/install/repo/ifcfg-eth0 /mnt/sysimage/etc/sysconfig/network-scripts/
cp /run/install/repo/ifcfg-eth1 /mnt/sysimage/etc/sysconfig/network-scripts/

echo Download Weka Software
wget -r -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/wekabits -P /run/install/repo/wekabits
# wget -r -nH --cut-dirs=5 ftp://192.168.0.99/pub/Linux/Weka/4.2/tarballs -P /run/install/repo/tarballs
# Above two directories makes full directory in /run/install/repo

echo Copying Weka Bits to /opt...

# Copy tarballs and weka bits to the new system
cp -r /run/install/repo/wekabits /mnt/sysimage/opt/
# cp -r /run/install/repo/tarballs /mnt/sysimage/opt/
echo Copy complete.

# Install weka-install service so weka installs on firstboot
chroot /mnt/sysimage /opt/wekabits/firstboot-setup

# Add kernel cmdline args
# chroot /mnt/sysimage /usr/sbin/grubby --update-kernel=ALL --args="clocksource=tsc tsc=reliable nomodeset intel_iommu=off intel_idle.max_cstate=0 processor.max_cstate=0 numa_balancing=disable"
# chroot /mnt/sysimage /usr/sbin/grub2-mkconfig -o /etc/grub2.cfg

# Disable the irq reservation on the i2c_i801 module
cp /mnt/sysimage/opt/wekabits/i2c_i801.conf /mnt/sysimage/etc/modprobe.d/

# Run custom post-install script
%include /run/install/repo/ks-postinstall

# Copy install logs to new system
cp -r /tmp /mnt/sysroot/root/install-logs

cp /run/install/repo/.*buildstamp /mnt/sysroot/

# Fix for permission error in cockpit
chmod 755 /mnt/sysimage/opt/wekabits/weka-install

date > /mnt/sysroot/.weka.installstamp

echo All Done!

echo
echo "$(env TZ=Asia/Seoul date) Finished kickstart post section"
echo

%end
# END OF POST INSTALL SECTION

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end
